import { Button } from '@/components/Button';
import { Container } from '@/components/Container';
import { Header } from '@/components/Header';
import { Hero } from '@/components/Hero';
import GridTestimonials, {
  useTestimonials,
} from '@/components/opentestimonials/GridTestimonials';
import backgroundImage from '@/images/background-call-to-action.jpg';
import clsx from 'clsx';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useRef, useState } from 'react';
import { useIntersection } from 'react-use';

export default function Subdomain() {
  const [expanded, setExpanded] = useState(false);
  const router = useRouter();
  const testimonials = useTestimonials({
    subdomain: String(router.query.subdomain),
  });
  const intersectionRef = useRef(null);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const intersection = useIntersection(intersectionRef, {
    root: null,
    rootMargin: '0px',
    threshold: 1,
  });
  const reappear =
    intersection && expanded && intersection.intersectionRatio < 1;

  if (!testimonials) {
    return null;
  }

  function handleClose() {
    setExpanded(false);
    containerRef.current?.scrollIntoView({
      behavior: 'smooth',
    });
  }

  return (
    <>
      <Header />

      <main className="light">
        <Hero />
        <div
          className={clsx('relative mx-auto my-8 max-w-7xl p-3 font-system', {
            'max-h-[33rem] overflow-hidden': !expanded,
            grow: expanded,
          })}
          ref={containerRef}
        >
          <GridTestimonials data={testimonials} />
          <div className="absolute top-[4vh]" ref={intersectionRef}></div>
          <div
            className={clsx(
              'pointer-events-none absolute inset-x-0 bottom-0 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 dark:from-slate-900',
              {
                hidden: expanded,
              }
            )}
          >
            <Button
              color="slate"
              type="button"
              onClick={() => setExpanded(true)}
              className={clsx('relative z-20 bg-white', {
                'pointer-events-auto': !expanded,
                'pointer-events-none': expanded,
              })}
            >
              Show more...
            </Button>
            {/* <button
            type="button"
            onClick={() => setExpanded(true)}
            className={clsx(
              'relative z-20 flex h-12 items-center rounded-lg bg-slate-900 px-6 text-sm font-semibold text-white hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 dark:bg-slate-700 dark:hover:bg-slate-600',
              {
                'pointer-events-auto': !expanded,
                'pointer-events-none': expanded,
              }
            )}
          >
            Show more...
          </button> */}
          </div>
          <div
            className={clsx(
              'pointer-events-none sticky inset-x-0 bottom-0 -mt-48 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 dark:from-slate-900',
              {
                'opacity-0': !reappear,
                'opacity-100 transition-opacity duration-300': reappear,
              }
            )}
          >
            <Button
              color="slate"
              type="button"
              onClick={handleClose}
              className={clsx('relative z-20 bg-white', {
                'translate-y-2': !reappear,
                'pointer-events-auto translate-y-0 transition-transform':
                  reappear,
              })}
            >
              Okay, I get the point
            </Button>
            {/* <button
            type="button"
            onClick={() => setExpanded(false)}
            className={clsx(
              'relative z-20 flex h-12 items-center rounded-lg bg-slate-900 px-6 text-sm font-semibold text-white hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-slate-400 focus:ring-offset-2 dark:bg-slate-700 dark:hover:bg-slate-600',
              {
                'translate-y-2': !reappear,
                'pointer-events-auto translate-y-0 transition-transform':
                  reappear,
              }
            )}
          >
            Okay, I get the point
          </button> */}
          </div>
        </div>

        <section
          id="get-started-today"
          className="relative overflow-hidden bg-blue-600 py-32"
        >
          <div className="absolute top-1/2 left-1/2 -translate-x-[50%] -translate-y-[50%]">
            <Image
              src={backgroundImage}
              alt=""
              width={2347}
              height={1244}
              layout="fixed"
              unoptimized
            />
          </div>
          <Container className="relative">
            <div className="mx-auto max-w-lg text-center">
              <h2 className="font-display text-3xl tracking-tight text-white sm:text-4xl">
                Leave a testimonial
              </h2>
              {/* <p className="mt-4 text-lg tracking-tight text-white">
              It’s time to take control of your books. Buy our software so you
              can feel like you’re doing something productive.
            </p> */}
              <Button href="/register" color="white" className="mt-10">
                Leave a testimonial
              </Button>
            </div>
          </Container>
        </section>
      </main>
    </>
  );
}
