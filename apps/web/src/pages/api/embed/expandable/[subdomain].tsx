import GridTestimonials, {
  useTestimonials,
} from '@/components/opentestimonials/GridTestimonials';
import { appRouter } from '@/server/router';
import { TestimonialsResponse } from '@/server/testimonials/getTestimonials';
import { createSSGHelpers } from '@trpc/react/ssg';
import clsx from 'clsx';
import { NextApiRequest, NextApiResponse } from 'next';
import { CSSProperties, useRef, useState } from 'react';
import * as ReactDOMServer from 'react-dom/server';
import { useIntersection } from 'react-use';
import superjson from 'superjson';
import invariant from 'tiny-invariant';

function ExpandableTestimonials(
  props:
    | { height?: string; style?: CSSProperties } & (
        | {
            subdomain: string;
            testimonials?: never;
          }
        | { subdomain?: never; testimonials: TestimonialsResponse }
      )
) {
  const [expanded, setExpanded] = useState(false);
  const testimonials = useTestimonials(props);
  const intersectionRef = useRef(null);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const intersection = useIntersection(intersectionRef, {
    root: null,
    rootMargin: '0px',
    threshold: 1,
  });
  // const intersection = {};
  const reappear =
    intersection && expanded && intersection.intersectionRatio < 1;

  if (!testimonials) {
    return null;
  }

  function handleClose() {
    setExpanded(false);
    containerRef.current?.scrollIntoView({
      behavior: 'smooth',
    });
  }
  return (
    <div
      className={clsx('relative font-system', {
        'overflow-hidden': !expanded,
        '!h-full grow': expanded,
      })}
      style={props.style}
      ref={containerRef}
    >
      <GridTestimonials data={testimonials} />
      <div className="absolute top-[4vh]" ref={intersectionRef}></div>
      <div
        className={clsx(
          'pointer-events-none absolute inset-x-0 bottom-0 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 dark:from-slate-900',
          {
            hidden: expanded,
          }
        )}
      >
        <button
          type="button"
          onClick={() => setExpanded(true)}
          className={clsx(
            'group pointer-events-auto relative z-50 inline-flex items-center justify-center rounded-full bg-slate-900 py-2 px-4 text-sm font-semibold text-white transition-opacity hover:bg-slate-700 hover:text-slate-100 focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-900 active:bg-slate-800 active:text-slate-300',
            {
              'pointer-events-auto': !expanded,
              'pointer-events-none': expanded,
            }
          )}
        >
          Show more...
        </button>
      </div>
      <div
        className={clsx(
          'pointer-events-none sticky inset-x-0 bottom-0 -mt-48 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 transition duration-300 dark:from-slate-900',
          {
            'translate-y-4 opacity-0': !reappear,
            'translate-y-0 opacity-100': reappear,
          }
        )}
      >
        <button
          type="button"
          onClick={handleClose}
          className={clsx(
            'group pointer-events-auto relative z-50 inline-flex items-center justify-center rounded-full bg-slate-900 py-2 px-4 text-sm font-semibold text-white hover:bg-slate-700 hover:text-slate-100 focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-900 active:bg-slate-800 active:text-slate-300',
            {
              'pointer-events-auto': reappear,
            }
          )}
        >
          Okay, I get the point
        </button>
      </div>
    </div>
  );
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const subdomain = req.query.subdomain;
  invariant(typeof subdomain === 'string', 'subdomain must be a string');
  // const testimonials = await getTestimonials(AirtableAdapter, {
  //   subdomain: subdomain,
  // });
  const ssg = createSSGHelpers({
    router: appRouter,
    ctx: {} as any,
    transformer: superjson, // optional - adds superjson serialization
  });
  const testimonials = await ssg.fetchQuery('embed.testimonials', {
    subdomain,
  });

  const html = ReactDOMServer.renderToString(
    <>
      <ExpandableTestimonials
        testimonials={testimonials}
        style={{ height: '100vh' }}
      />
    </>
  );
  res.status(200).send(html);
}
