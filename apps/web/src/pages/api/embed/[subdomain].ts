import { ENV } from '@/utils/env';
import { NextApiRequest, NextApiResponse } from 'next';
import invariant from 'tiny-invariant';
import { JSDOM } from 'jsdom';
import { Processor } from 'windicss/lib';
import { HTMLParser } from 'windicss/utils/parser';
import fetch from 'cross-fetch';
import { generateStyles } from '@/utils/generateStyles';

// export function generateStyles(html: string) {
//   // Get windi processor
//   const processor = new Processor();

//   // Parse all classes and put into one line to simplify operations
//   const htmlClasses = new HTMLParser(html)
//     .parseClasses()
//     .map((i) => i.result)
//     .join(' ');

//   // const safelist =

//   console.log(htmlClasses);

//   // Generate preflight based on the HTML we input
//   const preflightSheet = processor.preflight(html);

//   // Process the HTML classes to an interpreted style sheet
//   const interpretedSheet = processor.interpret(htmlClasses).styleSheet;

//   // Build styles

//   // we don't need preflight!
//   // const APPEND = false;
//   // const withPreflightStyles = interpretedSheet
//   //   .extend(preflightSheet, APPEND)
//   //   .build(MINIFY);
//   // return withPreflightStyles;

//   const MINIFY = true;
//   const styles = interpretedSheet.build(MINIFY);

//   return styles;
// }

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const subdomain = req.query.subdomain;
    const styles =
      typeof req.query.styles === 'string' ? req.query.styles === 'true' : true;
    invariant(typeof subdomain === 'string', 'invalid subdomain');
    const html = await (
      await fetch(`${ENV.get('SERVER_URL')}/embed/${subdomain}`)
    ).text();
    const withAbsoluteImagePaths = html.replaceAll(
      '/_next/image',
      `${ENV.get('SERVER_URL')}/_next/image`
    );
    const { document } = new JSDOM(withAbsoluteImagePaths).window;
    for (const script of document.querySelectorAll('script')) {
      script.remove();
    }
    const body = document.getElementById('__next');
    invariant(body, 'body not found');
    if (styles) {
      const preflight = req.query.preflight === 'true';
      const stylesEl = document.createElement('style');
      stylesEl.innerHTML = generateStyles(body.innerHTML, preflight);
      body.prepend(stylesEl);
    }

    res
      .status(200)
      .setHeader(
        'Cache-control',
        's-maxage=1, stale-while-revalidate=3154000000'
      )
      .setHeader('Accept-Encoding', 'gzip')
      // todo: only allow cors for registered hosts?
      .setHeader('Access-Control-Allow-Origin', '*')
      .send(body?.innerHTML);
  } catch (e) {
    console.error('Failed to render', e);
  }
}
