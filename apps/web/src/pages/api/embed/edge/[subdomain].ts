import { JSDOM } from 'jsdom';
import type { NextRequest } from 'next/server';
import invariant from 'tiny-invariant';

export const config = {
  runtime: 'experimental-edge',
};

export default async function handler(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const subdomain = url.pathname.split('/').pop();
    console.log(globalThis);
    // const subdomain = req.query.subdomain;
    // const styles =
    //   typeof req.query.styles === 'string' ? req.query.styles === 'true' : true;
    invariant(typeof subdomain === 'string', 'invalid subdomain');
    const html = await (
      await fetch(`${req.nextUrl.origin}/embed/${subdomain}`)
    ).text();
    // const withAbsoluteImagePaths = html.replaceAll(
    //   '/_next/image',
    //   `${ENV.get('SERVER_URL')}/_next/image`
    // );
    // const { document } = new JSDOM(withAbsoluteImagePaths).window;
    // for (const script of document.querySelectorAll('script')) {
    //   script.remove();
    // }
    // const body = document.getElementById('__next');
    // invariant(body, 'body not found');

    // // if (styles) {
    // //   const preflight = req.query.preflight === 'true';
    // //   const stylesEl = document.createElement('style');
    // //   stylesEl.innerHTML = generateStyles(body.innerHTML, preflight);
    // //   body.prepend(stylesEl);
    // // }

    return new Response(html, {
      status: 200,
      headers: {
        'Accept-Encoding': 'gzip',
        'Access-Control-Allow-Origin': '*',
        'Cache-control': 's-maxage=1, stale-while-revalidate=3154000000',
      },
    });

    // res
    //   .status(200)
    //   .setHeader(
    //     'Cache-control',
    //     's-maxage=1, stale-while-revalidate=3154000000'
    //   )
    //   .setHeader('Accept-Encoding', 'gzip')
    //   // todo: only allow cors for registered hosts?
    //   .setHeader('Access-Control-Allow-Origin', '*')
    //   .send(body?.innerHTML);
  } catch (e) {
    console.error('Failed to render', e);
  }
}
