import { generateStylesUnocss } from '@/utils/generateStylesUnocss';
import type { NextRequest } from 'next/server';
import invariant from 'tiny-invariant';

export const config = {
  runtime: 'experimental-edge',
};

function extractTestimonialsHtml(html: string) {
  const startSearch = `<div data-opentestimonials="start"></div>`;
  const iStart = html.indexOf(startSearch);
  const iEnd = html.indexOf('<div data-opentestimonials="end"></div>', iStart);
  return html.slice(iStart + startSearch.length, iEnd);
}

export default async function handler(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const subdomain = url.pathname.split('/').pop();
    const styles = url.searchParams.get('styles') === 'true';
    invariant(typeof subdomain === 'string', 'invalid subdomain');
    const html = await (
      await fetch(`${req.nextUrl.origin}/embed/${subdomain}`)
    ).text();
    const testimonialsHtml = extractTestimonialsHtml(html);
    invariant(testimonialsHtml, 'testimonialsHtml not found');
    let result = testimonialsHtml.replaceAll(
      '/_next/image',
      `${req.nextUrl.origin}/_next/image`
    );

    if (styles) {
      result = `<style>${await generateStylesUnocss(result)}</style>` + result;
    }
    if (url.searchParams.get('preflight') === 'true') {
      result =
        `<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@unocss/reset@0.44.0/tailwind.min.css"/>` +
        // `<link rel="stylesheet" href="https://unpkg.com/@unocss/reset@0.44.0/tailwind.css"/>` +
        result;
    }

    return new Response(result, {
      status: 200,
      headers: {
        'Accept-Encoding': 'gzip',
        'Access-Control-Allow-Origin': '*',
        'Cache-Control': 's-maxage=1, stale-while-revalidate=3154000000',
        'Content-Type': 'text/html;charset=UTF-8',
      },
    });
  } catch (e) {
    console.error('Failed to render', e);
  }
}
