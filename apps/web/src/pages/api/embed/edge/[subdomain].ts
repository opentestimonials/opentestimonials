import type { NextRequest } from 'next/server';
import invariant from 'tiny-invariant';
import { generateStyles } from '../../../../utils/generateStyles';
import { load } from 'cheerio';

export const config = {
  runtime: 'experimental-edge',
};

export default async function handler(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const subdomain = url.pathname.split('/').pop();
    const styles = url.searchParams.get('styles') === 'true';
    invariant(typeof subdomain === 'string', 'invalid subdomain');
    const html = await (
      await fetch(`${req.nextUrl.origin}/embed/${subdomain}`)
    ).text();
    const $ = load(html);

    // const __nextAppHtml = /<div id="__next">(.*)<\/div>/gm.exec(html)?.[1];
    const __nextAppHtml = $('#__next').html();
    invariant(__nextAppHtml, '__nextAppHtml not found');
    let withAbsoluteImagePaths = __nextAppHtml.replaceAll(
      '/_next/image',
      `${req.nextUrl.origin}/_next/image`
    );

    if (styles) {
      const preflight = url.searchParams.get('preflight') === 'true';
      withAbsoluteImagePaths =
        `<style>${generateStyles(withAbsoluteImagePaths, preflight)}</style>` +
        withAbsoluteImagePaths;
    }

    return new Response(withAbsoluteImagePaths, {
      status: 200,
      headers: {
        'Accept-Encoding': 'gzip',
        'Access-Control-Allow-Origin': '*',
        'Cache-Control': 's-maxage=1, stale-while-revalidate=3154000000',
        'Content-Type': 'text/html;charset=UTF-8',
      },
    });
  } catch (e) {
    console.error('Failed to render', e);
  }
}
