import ExpandableTestimonials from '@/components/opentestimonials/ExpandableTestimonials';
import { useTestimonials } from '@/components/opentestimonials/GridTestimonials';
import { appRouter } from '@/server/router';
import { createProxySSGHelpers } from '@trpc/react-query/ssg';
import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from 'next';
import DefaultErrorPage from 'next/error';
import Head from 'next/head';
import superjson from 'superjson';
import invariant from 'tiny-invariant';

export default function Subdomain(
  props: InferGetStaticPropsType<typeof getStaticProps>
) {
  const testimonials = useTestimonials({
    subdomain: props.subdomain,
  });

  if (!testimonials) {
    return (
      <>
        <Head>
          <meta name="robots" content="noindex" />
        </Head>
        <DefaultErrorPage statusCode={404} />
      </>
    );
  }

  return (
    <>
      <ExpandableTestimonials
        testimonials={testimonials.testimonials}
        style={{ height: '100vh' }}
      />
    </>
  );
}

export const getStaticProps: GetStaticProps<{ subdomain: string }> = async (
  context
) => {
  const ssg = createProxySSGHelpers({
    router: appRouter,
    ctx: {} as any,
    transformer: superjson, // optional - adds superjson serialization
  });
  const subdomain = String(context.params?.subdomain);

  invariant(subdomain);

  await ssg.embed.testimonials.prefetch({
    subdomain,
  });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      subdomain,
    },
    revalidate: 1,
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [{ params: { subdomain: 'demo' } }],
    // https://nextjs.org/docs/basic-features/data-fetching#fallback-blocking
    fallback: 'blocking',
  };
};
