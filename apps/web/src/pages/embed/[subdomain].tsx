import GridTestimonials, {
  useTestimonials,
} from '@/components/opentestimonials/GridTestimonials';
import { appRouter } from '@/server/router';
import { createSSGHelpers } from '@trpc/react/ssg';
import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from 'next';
import Head from 'next/head';
import superjson from 'superjson';
import invariant from 'tiny-invariant';
import DefaultErrorPage from 'next/error';

export default function Subdomain(
  props: InferGetStaticPropsType<typeof getStaticProps>
) {
  const testimonials = useTestimonials({
    subdomain: props.subdomain,
  });

  if (!testimonials) {
    return (
      <>
        <Head>
          <meta name="robots" content="noindex" />
        </Head>
        <DefaultErrorPage statusCode={404} />
      </>
    );
  }

  return (
    <>
      <div data-opentestimonials="start"></div>
      <GridTestimonials data={testimonials} />
      <div className="hidden h-12 w-12 items-center justify-center rounded-full text-lg font-semibold uppercase text-white" />
      <div data-opentestimonials="end"></div>
    </>
  );
}

export const getStaticProps: GetStaticProps<{ subdomain: string }> = async (
  context
) => {
  const ssg = createSSGHelpers({
    router: appRouter,
    ctx: {} as any,
    transformer: superjson, // optional - adds superjson serialization
  });
  const subdomain = String(context.params?.subdomain);

  invariant(subdomain);

  await ssg
    .fetchQuery('embed.testimonials', {
      subdomain,
    })
    .catch((e) => console.error(e));

  return {
    props: {
      trpcState: ssg.dehydrate(),
      subdomain,
    },
    revalidate: 1,
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [{ params: { subdomain: 'demo' } }],
    // https://nextjs.org/docs/basic-features/data-fetching#fallback-blocking
    fallback: 'blocking',
  };
};
