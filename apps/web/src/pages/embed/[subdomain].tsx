import GridTestimonials, {
  useTestimonials,
} from '@/components/opentestimonials/GridTestimonials';
import { appRouter } from '@/server/router';
import { createSSGHelpers } from '@trpc/react/ssg';
import {
  GetStaticPaths,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from 'next';
import superjson from 'superjson';
import invariant from 'tiny-invariant';

export default function Subdomain(
  props: InferGetStaticPropsType<typeof getStaticProps>
) {
  const testimonials = useTestimonials({
    subdomain: props.subdomain,
  });
  if (!testimonials) {
    return null;
  }

  return (
    <div className="mx-auto max-w-7xl p-3 font-system">
      <GridTestimonials data={testimonials} />
    </div>
  );
}

export async function getStaticProps(
  context: GetStaticPropsContext<{ subdomain: string }>
) {
  const ssg = createSSGHelpers({
    router: appRouter,
    ctx: {} as any,
    transformer: superjson, // optional - adds superjson serialization
  });
  const subdomain = context.params?.subdomain;

  invariant(subdomain);

  await ssg.fetchQuery('embed.testimonials', {
    subdomain,
  });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      subdomain,
    },
    revalidate: 1,
  };
}

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [{ params: { subdomain: 'demo' } }],
    // https://nextjs.org/docs/basic-features/data-fetching#fallback-blocking
    fallback: 'blocking',
  };
};
