import { TRPCError } from '@trpc/server';
import { createRouter } from './context';
import { z } from 'zod';
import { CreateCollectionValidator } from '@/validators/collection';
import { prisma } from '@/server/db/client';

export const dashboardRouter = createRouter()
  .query('hello', {
    resolve({ ctx }) {
      return 'world';
    },
  })
  .middleware(async ({ ctx, next }) => {
    // Any queries or mutations after this middleware will
    // raise an error unless there is a current session
    if (!ctx.session) {
      throw new TRPCError({ code: 'UNAUTHORIZED' });
    }
    return next();
  })
  .query('getSecretMessage', {
    async resolve({ ctx }) {
      return 'You are logged in and can see this secret message!';
    },
  })
  .query('collections', {
    async resolve({ ctx }) {
      return prisma.collection.findMany({
        where: {
          ownerId: ctx.session?.user?.id,
        },
      });
    },
  })
  .query('collection', {
    input: z.object({
      subdomain: z.string(),
    }),
    async resolve({ ctx, input }) {
      const collection = await prisma.collection.findUnique({
        where: {
          subdomain: input.subdomain,
        },
      });
      if (collection?.ownerId !== ctx.session?.user?.id) {
        throw new TRPCError({ code: 'UNAUTHORIZED' });
      }
      return collection;
    },
  })
  .mutation('collection', {
    input: CreateCollectionValidator,
    async resolve({ ctx, input }) {
      return prisma.collection.create({
        data: input,
      });
    },
  });
// .query()
