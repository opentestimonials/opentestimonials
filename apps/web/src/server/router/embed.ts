import { prisma } from '@/server/db/client';
import { filterValidTestimonials } from '@/validators/testimonial';
import { TRPCError } from '@trpc/server';
import Airtable from 'airtable';
import { z } from 'zod';
import { createRouter } from './context';

export async function getAirtableTestimonials(options: EmbedOptions) {
  const collection = await prisma.collection.findUnique({
    where: {
      subdomain: options.subdomain,
    },
  });
  if (!collection) {
    throw new TRPCError({ code: 'NOT_FOUND' });
  }
  const { airtableApiKey, airtableBase, airtableTable } = collection;
  if (!airtableApiKey || !airtableBase || !airtableTable) {
    console.error('Missing Airtable API key, base, or table');
    throw new TRPCError({ code: 'NOT_FOUND' });
  }
  const base = new Airtable({ apiKey: airtableApiKey }).base(airtableBase);
  const rawRecords = (
    await base(airtableTable)
      .select({
        maxRecords: 100,
        view: 'Grid view',
        cellFormat: 'json',
      })
      .all()
  ).map((r) => r._rawJson);

  const testimonials = filterValidTestimonials(rawRecords);
  return testimonials;
}

const embedRouterValidator = z.object({
  subdomain: z.string(),
  pathname: z.string().optional(),
});
type EmbedOptions = z.infer<typeof embedRouterValidator>;

export const embedRouter = createRouter().query('testimonials', {
  input: embedRouterValidator,
  async resolve({ input }) {
    const testimonials = await getAirtableTestimonials(input);
    return testimonials;
  },
});
