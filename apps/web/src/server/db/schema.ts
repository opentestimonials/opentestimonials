import z from 'zod';

export const ExampleValidator = z.object({
  id: z.string(),
});
export type Example = z.infer<typeof ExampleValidator>;

export const VerificationTokenValidator = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.date(),
});
export type VerificationToken = z.infer<typeof VerificationTokenValidator>;

export const UserValidator = z.object({
  id: z.string(),
  name: z.string().nullable(),
  email: z.string().nullable(),
  emailVerified: z.date().nullable(),
  image: z.string().nullable(),
});
export type User = z.infer<typeof UserValidator>;

export const CollectionValidator = z.object({
  id: z.string(),
  ownerId: z.string(),
  airtableUrl: z.string(),
  subdomain: z.string(),
  airtableApiKey: z.string().nullable(),
  airtableBase: z.string().nullable(),
  airtableTable: z.string().nullable(),
});
export type Collection = z.infer<typeof CollectionValidator>;

export const SessionValidator = z.object({
  id: z.string(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.date(),
});
export type Session = z.infer<typeof SessionValidator>;

export const AccountValidator = z.object({
  id: z.string(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.number().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
  refresh_token_expires_in: z.number().nullable(),
});
export type Account = z.infer<typeof AccountValidator>;

export const customerValidator = z.object({
  id: z.string(),
  address: z.record(z.string().min(1), z.unknown()).nullable(),
  balance: z.number().nullable(),
  cash_balance: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string().nullable(),
  default_source: z.string().nullable(),
  delinquent: z.boolean().nullable(),
  description: z.string().nullable(),
  discount: z.record(z.string().min(1), z.unknown()).nullable(),
  email: z.string().nullable(),
  invoice_prefix: z.string().nullable(),
  invoice_settings: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  name: z.string().nullable(),
  next_invoice_sequence: z.number().nullable(),
  object: z.string(),
  phone: z.string().nullable(),
  preferred_locales: z.record(z.string().min(1), z.unknown()).nullable(),
  shipping: z.record(z.string().min(1), z.unknown()).nullable(),
  sources: z.record(z.string().min(1), z.unknown()).nullable(),
  subscriptions: z.record(z.string().min(1), z.unknown()).nullable(),
  tax: z.record(z.string().min(1), z.unknown()).nullable(),
  tax_exempt: z.string().nullable(),
  tax_ids: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type customer = z.infer<typeof customerValidator>;

export const applicationValidator = z.object({
  id: z.string(),
  name: z.string().nullable(),
  object: z.string(),
});
export type application = z.infer<typeof applicationValidator>;

export const three_d_secureValidator = z.object({
  id: z.string(),
  amount: z.number(),
  authenticated: z.boolean(),
  card: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string(),
  livemode: z.boolean(),
  object: z.string(),
  redirect_url: z.string().nullable(),
  status: z.string(),
});
export type three_d_secure = z.infer<typeof three_d_secureValidator>;

export const accountValidator = z.object({
  id: z.string(),
  business_profile: z.record(z.string().min(1), z.unknown()).nullable(),
  business_type: z.string().nullable(),
  capabilities: z.record(z.string().min(1), z.unknown()).nullable(),
  charges_enabled: z.boolean().nullable(),
  company: z.record(z.string().min(1), z.unknown()).nullable(),
  controller: z.record(z.string().min(1), z.unknown()).nullable(),
  country: z.string().nullable(),
  created: z.number().nullable(),
  default_currency: z.string().nullable(),
  details_submitted: z.boolean().nullable(),
  email: z.string().nullable(),
  external_accounts: z.record(z.string().min(1), z.unknown()).nullable(),
  future_requirements: z.record(z.string().min(1), z.unknown()).nullable(),
  individual: z.record(z.string().min(1), z.unknown()).nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  payouts_enabled: z.boolean().nullable(),
  requirements: z.record(z.string().min(1), z.unknown()).nullable(),
  settings: z.record(z.string().min(1), z.unknown()).nullable(),
  tos_acceptance: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string().nullable(),
});
export type account = z.infer<typeof accountValidator>;

export const capabilityValidator = z.object({
  id: z.string(),
  account: z.string().nullable(),
  future_requirements: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  requested: z.boolean(),
  requested_at: z.number().nullable(),
  requirements: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
});
export type capability = z.infer<typeof capabilityValidator>;

export const bank_accountValidator = z.object({
  id: z.string(),
  account: z.string().nullable(),
  account_holder_name: z.string().nullable(),
  account_holder_type: z.string().nullable(),
  account_type: z.string().nullable(),
  available_payout_methods: z.record(z.string().min(1), z.unknown()).nullable(),
  bank_name: z.string().nullable(),
  country: z.string(),
  currency: z.string(),
  customer: z.string().nullable(),
  default_for_currency: z.boolean().nullable(),
  fingerprint: z.string().nullable(),
  last4: z.string(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  routing_number: z.string().nullable(),
  status: z.string(),
});
export type bank_account = z.infer<typeof bank_accountValidator>;

export const personValidator = z.object({
  id: z.string(),
  account: z.string(),
  address: z.record(z.string().min(1), z.unknown()).nullable(),
  address_kana: z.record(z.string().min(1), z.unknown()).nullable(),
  address_kanji: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  dob: z.record(z.string().min(1), z.unknown()).nullable(),
  email: z.string().nullable(),
  first_name: z.string().nullable(),
  first_name_kana: z.string().nullable(),
  first_name_kanji: z.string().nullable(),
  full_name_aliases: z.record(z.string().min(1), z.unknown()).nullable(),
  future_requirements: z.record(z.string().min(1), z.unknown()).nullable(),
  gender: z.string().nullable(),
  id_number_provided: z.boolean().nullable(),
  id_number_secondary_provided: z.boolean().nullable(),
  last_name: z.string().nullable(),
  last_name_kana: z.string().nullable(),
  last_name_kanji: z.string().nullable(),
  maiden_name: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  nationality: z.string().nullable(),
  object: z.string(),
  phone: z.string().nullable(),
  political_exposure: z.string().nullable(),
  registered_address: z.record(z.string().min(1), z.unknown()).nullable(),
  relationship: z.record(z.string().min(1), z.unknown()).nullable(),
  requirements: z.record(z.string().min(1), z.unknown()).nullable(),
  ssn_last_4_provided: z.boolean().nullable(),
  verification: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type person = z.infer<typeof personValidator>;

export const apple_pay_domainValidator = z.object({
  id: z.string(),
  created: z.number(),
  domain_name: z.string(),
  livemode: z.boolean(),
  object: z.string(),
});
export type apple_pay_domain = z.infer<typeof apple_pay_domainValidator>;

export const application_feeValidator = z.object({
  id: z.string(),
  account: z.string().nullable(),
  amount: z.number(),
  amount_refunded: z.number(),
  application: z.string().nullable(),
  balance_transaction: z.string().nullable(),
  charge: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  livemode: z.boolean(),
  object: z.string(),
  originating_transaction: z.string().nullable(),
  refunded: z.boolean(),
  refunds: z.record(z.string().min(1), z.unknown()),
});
export type application_fee = z.infer<typeof application_feeValidator>;

export const fee_refundValidator = z.object({
  id: z.string(),
  amount: z.number(),
  balance_transaction: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  fee: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
});
export type fee_refund = z.infer<typeof fee_refundValidator>;

export const apps_secretValidator = z.object({
  id: z.string(),
  created: z.number(),
  deleted: z.boolean().nullable(),
  livemode: z.boolean(),
  name: z.string(),
  object: z.string(),
  payload: z.string().nullable(),
  scope: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type apps_secret = z.infer<typeof apps_secretValidator>;

export const balanceValidator = z.object({
  id: z.string(),
  available: z.record(z.string().min(1), z.unknown()),
  connect_reserved: z.record(z.string().min(1), z.unknown()).nullable(),
  instant_available: z.record(z.string().min(1), z.unknown()).nullable(),
  issuing: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  pending: z.record(z.string().min(1), z.unknown()),
});
export type balance = z.infer<typeof balanceValidator>;

export const balance_transactionValidator = z.object({
  id: z.string(),
  amount: z.number(),
  available_on: z.number(),
  created: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  exchange_rate: z.number().nullable(),
  fee: z.number(),
  fee_details: z.record(z.string().min(1), z.unknown()),
  net: z.number(),
  object: z.string(),
  reporting_category: z.string(),
  source: z.string().nullable(),
  status: z.string(),
  type: z.string(),
});
export type balance_transaction = z.infer<typeof balance_transactionValidator>;

export const billing_portal_configurationValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  application: z.string().nullable(),
  business_profile: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  default_return_url: z.string().nullable(),
  features: z.record(z.string().min(1), z.unknown()).nullable(),
  is_default: z.boolean(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  updated: z.number(),
});
export type billing_portal_configuration = z.infer<typeof billing_portal_configurationValidator>;

export const bitcoin_receiverValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  amount: z.number(),
  amount_received: z.number(),
  bitcoin_amount: z.number(),
  bitcoin_amount_received: z.number(),
  bitcoin_uri: z.string(),
  created: z.number(),
  currency: z.string(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  email: z.string().nullable(),
  filled: z.boolean(),
  inbound_address: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  payment: z.string().nullable(),
  refund_address: z.string().nullable(),
  transactions: z.record(z.string().min(1), z.unknown()).nullable(),
  uncaptured_funds: z.boolean(),
  used_for_payment: z.boolean().nullable(),
});
export type bitcoin_receiver = z.infer<typeof bitcoin_receiverValidator>;

export const bitcoin_transactionValidator = z.object({
  id: z.string(),
  amount: z.number(),
  bitcoin_amount: z.number(),
  created: z.number(),
  currency: z.string(),
  object: z.string(),
  receiver: z.string(),
});
export type bitcoin_transaction = z.infer<typeof bitcoin_transactionValidator>;

export const chargeValidator = z.object({
  id: z.string(),
  amount: z.number(),
  amount_captured: z.number(),
  amount_refunded: z.number(),
  application: z.string().nullable(),
  application_fee: z.string().nullable(),
  application_fee_amount: z.number().nullable(),
  balance_transaction: z.string().nullable(),
  billing_details: z.record(z.string().min(1), z.unknown()).nullable(),
  calculated_statement_descriptor: z.string().nullable(),
  captured: z.boolean(),
  created: z.number(),
  currency: z.string(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  disputed: z.boolean(),
  failure_balance_transaction: z.string().nullable(),
  failure_code: z.string().nullable(),
  failure_message: z.string().nullable(),
  fraud_details: z.record(z.string().min(1), z.unknown()).nullable(),
  invoice: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  on_behalf_of: z.string().nullable(),
  outcome: z.record(z.string().min(1), z.unknown()).nullable(),
  paid: z.boolean(),
  payment_intent: z.string().nullable(),
  payment_method: z.string().nullable(),
  payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  radar_options: z.record(z.string().min(1), z.unknown()).nullable(),
  receipt_email: z.string().nullable(),
  receipt_number: z.string().nullable(),
  receipt_url: z.string().nullable(),
  refunded: z.boolean(),
  refunds: z.record(z.string().min(1), z.unknown()),
  review: z.string().nullable(),
  shipping: z.record(z.string().min(1), z.unknown()).nullable(),
  source_transfer: z.string().nullable(),
  statement_descriptor: z.string().nullable(),
  statement_descriptor_suffix: z.string().nullable(),
  status: z.string(),
  transfer: z.string().nullable(),
  transfer_data: z.record(z.string().min(1), z.unknown()).nullable(),
  transfer_group: z.string().nullable(),
});
export type charge = z.infer<typeof chargeValidator>;

export const disputeValidator = z.object({
  id: z.string(),
  amount: z.number(),
  balance_transactions: z.record(z.string().min(1), z.unknown()),
  charge: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  evidence: z.record(z.string().min(1), z.unknown()).nullable(),
  evidence_details: z.record(z.string().min(1), z.unknown()).nullable(),
  is_charge_refundable: z.boolean(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  payment_intent: z.string().nullable(),
  reason: z.string(),
  status: z.string(),
});
export type dispute = z.infer<typeof disputeValidator>;

export const refundValidator = z.object({
  id: z.string(),
  amount: z.number(),
  balance_transaction: z.string().nullable(),
  charge: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  failure_balance_transaction: z.string().nullable(),
  failure_reason: z.string().nullable(),
  instructions_email: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  next_action: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  payment_intent: z.string().nullable(),
  reason: z.string().nullable(),
  receipt_number: z.string().nullable(),
  source_transfer_reversal: z.string().nullable(),
  status: z.string().nullable(),
  transfer_reversal: z.string().nullable(),
});
export type refund = z.infer<typeof refundValidator>;

export const checkout_sessionValidator = z.object({
  id: z.string(),
  after_expiration: z.record(z.string().min(1), z.unknown()).nullable(),
  allow_promotion_codes: z.boolean().nullable(),
  amount_subtotal: z.number().nullable(),
  amount_total: z.number().nullable(),
  automatic_tax: z.record(z.string().min(1), z.unknown()).nullable(),
  billing_address_collection: z.string().nullable(),
  cancel_url: z.string(),
  client_reference_id: z.string().nullable(),
  consent: z.record(z.string().min(1), z.unknown()).nullable(),
  consent_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  currency: z.string().nullable(),
  customer: z.string().nullable(),
  customer_creation: z.string().nullable(),
  customer_details: z.record(z.string().min(1), z.unknown()).nullable(),
  customer_email: z.string().nullable(),
  expires_at: z.number(),
  line_items: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  locale: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  mode: z.string(),
  object: z.string(),
  payment_intent: z.string().nullable(),
  payment_link: z.string().nullable(),
  payment_method_options: z.record(z.string().min(1), z.unknown()).nullable(),
  payment_method_types: z.record(z.string().min(1), z.unknown()),
  payment_status: z.string(),
  phone_number_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  recovered_from: z.string().nullable(),
  setup_intent: z.string().nullable(),
  shipping: z.record(z.string().min(1), z.unknown()).nullable(),
  shipping_address_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  shipping_options: z.record(z.string().min(1), z.unknown()),
  shipping_rate: z.string().nullable(),
  status: z.string().nullable(),
  submit_type: z.string().nullable(),
  subscription: z.string().nullable(),
  success_url: z.string(),
  tax_id_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  total_details: z.record(z.string().min(1), z.unknown()).nullable(),
  url: z.string().nullable(),
});
export type checkout_session = z.infer<typeof checkout_sessionValidator>;

export const itemValidator = z.object({
  id: z.string(),
  amount_discount: z.number().nullable(),
  amount_subtotal: z.number(),
  amount_tax: z.number().nullable(),
  amount_total: z.number(),
  currency: z.string(),
  description: z.string(),
  discounts: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  price: z.record(z.string().min(1), z.unknown()).nullable(),
  product: z.string().nullable(),
  quantity: z.number().nullable(),
  taxes: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type item = z.infer<typeof itemValidator>;

export const country_specValidator = z.object({
  id: z.string(),
  default_currency: z.string(),
  object: z.string(),
  supported_bank_account_currencies: z.record(z.string().min(1), z.unknown()),
  supported_payment_currencies: z.record(z.string().min(1), z.unknown()),
  supported_payment_methods: z.record(z.string().min(1), z.unknown()),
  supported_transfer_countries: z.record(z.string().min(1), z.unknown()),
  verification_fields: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type country_spec = z.infer<typeof country_specValidator>;

export const couponValidator = z.object({
  id: z.string(),
  amount_off: z.number().nullable(),
  applies_to: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string().nullable(),
  duration: z.string(),
  duration_in_months: z.number().nullable(),
  livemode: z.boolean(),
  max_redemptions: z.number().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  name: z.string().nullable(),
  object: z.string(),
  percent_off: z.number().nullable(),
  redeem_by: z.number().nullable(),
  times_redeemed: z.number(),
  valid: z.boolean(),
});
export type coupon = z.infer<typeof couponValidator>;

export const credit_noteValidator = z.object({
  id: z.string(),
  amount: z.number(),
  created: z.number(),
  currency: z.string(),
  customer: z.string().nullable(),
  customer_balance_transaction: z.string().nullable(),
  discount_amount: z.number(),
  discount_amounts: z.record(z.string().min(1), z.unknown()),
  invoice: z.string().nullable(),
  lines: z.record(z.string().min(1), z.unknown()),
  livemode: z.boolean(),
  memo: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  number: z.string(),
  object: z.string(),
  out_of_band_amount: z.number().nullable(),
  pdf: z.string(),
  reason: z.string().nullable(),
  refund: z.string().nullable(),
  status: z.string(),
  subtotal: z.number(),
  tax_amounts: z.record(z.string().min(1), z.unknown()),
  total: z.number(),
  type: z.string(),
  voided_at: z.number().nullable(),
});
export type credit_note = z.infer<typeof credit_noteValidator>;

export const credit_note_line_itemValidator = z.object({
  id: z.string(),
  amount: z.number(),
  description: z.string().nullable(),
  discount_amount: z.number(),
  discount_amounts: z.record(z.string().min(1), z.unknown()),
  invoice_line_item: z.string().nullable(),
  livemode: z.boolean(),
  object: z.string(),
  quantity: z.number().nullable(),
  tax_amounts: z.record(z.string().min(1), z.unknown()),
  tax_rates: z.record(z.string().min(1), z.unknown()),
  type: z.string(),
  unit_amount: z.number().nullable(),
  unit_amount_decimal: z.string().nullable(),
});
export type credit_note_line_item = z.infer<typeof credit_note_line_itemValidator>;

export const customer_balance_transactionValidator = z.object({
  id: z.string(),
  amount: z.number(),
  created: z.number(),
  credit_note: z.string().nullable(),
  currency: z.string(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  ending_balance: z.number(),
  invoice: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  type: z.string(),
});
export type customer_balance_transaction = z.infer<typeof customer_balance_transactionValidator>;

export const cardValidator = z.object({
  id: z.string(),
  account: z.string().nullable(),
  address_city: z.string().nullable(),
  address_country: z.string().nullable(),
  address_line1: z.string().nullable(),
  address_line1_check: z.string().nullable(),
  address_line2: z.string().nullable(),
  address_state: z.string().nullable(),
  address_zip: z.string().nullable(),
  address_zip_check: z.string().nullable(),
  available_payout_methods: z.record(z.string().min(1), z.unknown()).nullable(),
  brand: z.string(),
  country: z.string().nullable(),
  currency: z.string().nullable(),
  customer: z.string().nullable(),
  cvc_check: z.string().nullable(),
  default_for_currency: z.boolean().nullable(),
  dynamic_last4: z.string().nullable(),
  exp_month: z.number(),
  exp_year: z.number(),
  fingerprint: z.string().nullable(),
  funding: z.string(),
  last4: z.string(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  name: z.string().nullable(),
  object: z.string(),
  recipient: z.string().nullable(),
  status: z.string().nullable(),
  tokenization_method: z.string().nullable(),
});
export type card = z.infer<typeof cardValidator>;

export const cash_balanceValidator = z.object({
  id: z.string(),
  available: z.record(z.string().min(1), z.unknown()).nullable(),
  customer: z.string(),
  livemode: z.boolean(),
  object: z.string(),
  settings: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type cash_balance = z.infer<typeof cash_balanceValidator>;

export const discountValidator = z.object({
  id: z.string(),
  checkout_session: z.string().nullable(),
  coupon: z.record(z.string().min(1), z.unknown()).nullable(),
  customer: z.string().nullable(),
  end: z.number().nullable(),
  invoice: z.string().nullable(),
  invoice_item: z.string().nullable(),
  object: z.string(),
  promotion_code: z.string().nullable(),
  start: z.number(),
  subscription: z.string().nullable(),
});
export type discount = z.infer<typeof discountValidator>;

export const payment_methodValidator = z.object({
  id: z.string(),
  acss_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  affirm: z.record(z.string().min(1), z.unknown()).nullable(),
  afterpay_clearpay: z.record(z.string().min(1), z.unknown()).nullable(),
  alipay: z.record(z.string().min(1), z.unknown()).nullable(),
  au_becs_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  bacs_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  bancontact: z.record(z.string().min(1), z.unknown()).nullable(),
  billing_details: z.record(z.string().min(1), z.unknown()).nullable(),
  boleto: z.record(z.string().min(1), z.unknown()).nullable(),
  card: z.record(z.string().min(1), z.unknown()).nullable(),
  card_present: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  customer: z.string().nullable(),
  customer_balance: z.record(z.string().min(1), z.unknown()).nullable(),
  eps: z.record(z.string().min(1), z.unknown()).nullable(),
  fpx: z.record(z.string().min(1), z.unknown()).nullable(),
  giropay: z.record(z.string().min(1), z.unknown()).nullable(),
  grabpay: z.record(z.string().min(1), z.unknown()).nullable(),
  ideal: z.record(z.string().min(1), z.unknown()).nullable(),
  interac_present: z.record(z.string().min(1), z.unknown()).nullable(),
  klarna: z.record(z.string().min(1), z.unknown()).nullable(),
  konbini: z.record(z.string().min(1), z.unknown()).nullable(),
  link: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  oxxo: z.record(z.string().min(1), z.unknown()).nullable(),
  p24: z.record(z.string().min(1), z.unknown()).nullable(),
  paynow: z.record(z.string().min(1), z.unknown()).nullable(),
  radar_options: z.record(z.string().min(1), z.unknown()).nullable(),
  sepa_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  sofort: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string(),
  us_bank_account: z.record(z.string().min(1), z.unknown()).nullable(),
  wechat_pay: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type payment_method = z.infer<typeof payment_methodValidator>;

export const alipay_accountValidator = z.object({
  id: z.string(),
  created: z.number(),
  customer: z.string().nullable(),
  fingerprint: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  payment_amount: z.number().nullable(),
  payment_currency: z.string().nullable(),
  reusable: z.boolean(),
  used: z.boolean(),
  username: z.string(),
});
export type alipay_account = z.infer<typeof alipay_accountValidator>;

export const subscriptionValidator = z.object({
  id: z.string(),
  application: z.string().nullable(),
  application_fee_percent: z.number().nullable(),
  automatic_tax: z.record(z.string().min(1), z.unknown()).nullable(),
  billing_cycle_anchor: z.number(),
  billing_thresholds: z.record(z.string().min(1), z.unknown()).nullable(),
  cancel_at: z.number().nullable(),
  cancel_at_period_end: z.boolean(),
  canceled_at: z.number().nullable(),
  collection_method: z.string(),
  created: z.number(),
  current_period_end: z.number(),
  current_period_start: z.number(),
  customer: z.string().nullable(),
  days_until_due: z.number().nullable(),
  default_payment_method: z.string().nullable(),
  default_source: z.string().nullable(),
  default_tax_rates: z.record(z.string().min(1), z.unknown()).nullable(),
  description: z.string().nullable(),
  discount: z.record(z.string().min(1), z.unknown()).nullable(),
  ended_at: z.number().nullable(),
  items: z.record(z.string().min(1), z.unknown()),
  latest_invoice: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  next_pending_invoice_item_invoice: z.number().nullable(),
  object: z.string(),
  pause_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  payment_settings: z.record(z.string().min(1), z.unknown()).nullable(),
  pending_invoice_item_interval: z.record(z.string().min(1), z.unknown()).nullable(),
  pending_setup_intent: z.string().nullable(),
  pending_update: z.record(z.string().min(1), z.unknown()).nullable(),
  schedule: z.string().nullable(),
  start_date: z.number(),
  status: z.string(),
  transfer_data: z.record(z.string().min(1), z.unknown()).nullable(),
  trial_end: z.number().nullable(),
  trial_start: z.number().nullable(),
});
export type subscription = z.infer<typeof subscriptionValidator>;

export const tax_idValidator = z.object({
  id: z.string(),
  country: z.string().nullable(),
  created: z.number(),
  customer: z.string().nullable(),
  livemode: z.boolean(),
  object: z.string(),
  type: z.string(),
  value: z.string(),
  verification: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type tax_id = z.infer<typeof tax_idValidator>;

export const eventValidator = z.object({
  id: z.string(),
  account: z.string().nullable(),
  api_version: z.string().nullable(),
  created: z.number(),
  data: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  pending_webhooks: z.number(),
  request: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string(),
});
export type event = z.infer<typeof eventValidator>;

export const exchange_rateValidator = z.object({
  id: z.string(),
  object: z.string(),
  rates: z.record(z.string().min(1), z.unknown()),
});
export type exchange_rate = z.infer<typeof exchange_rateValidator>;

export const file_linkValidator = z.object({
  id: z.string(),
  created: z.number(),
  expired: z.boolean(),
  expires_at: z.number().nullable(),
  file: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  url: z.string().nullable(),
});
export type file_link = z.infer<typeof file_linkValidator>;

export const fileValidator = z.object({
  id: z.string(),
  created: z.number(),
  expires_at: z.number().nullable(),
  filename: z.string().nullable(),
  links: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  purpose: z.string(),
  size: z.number(),
  title: z.string().nullable(),
  type: z.string().nullable(),
  url: z.string().nullable(),
});
export type file = z.infer<typeof fileValidator>;

export const financial_connections_accountValidator = z.object({
  id: z.string(),
  account_holder: z.record(z.string().min(1), z.unknown()).nullable(),
  balance: z.record(z.string().min(1), z.unknown()).nullable(),
  balance_refresh: z.record(z.string().min(1), z.unknown()).nullable(),
  category: z.string(),
  created: z.number(),
  display_name: z.string().nullable(),
  institution_name: z.string(),
  last4: z.string().nullable(),
  livemode: z.boolean(),
  object: z.string(),
  ownership: z.string().nullable(),
  ownership_refresh: z.record(z.string().min(1), z.unknown()).nullable(),
  permissions: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  subcategory: z.string(),
  supported_payment_method_types: z.record(z.string().min(1), z.unknown()),
});
export type financial_connections_account = z.infer<typeof financial_connections_accountValidator>;

export const financial_connections_account_ownerValidator = z.object({
  id: z.string(),
  email: z.string().nullable(),
  name: z.string(),
  object: z.string(),
  ownership: z.string(),
  phone: z.string().nullable(),
  raw_address: z.string().nullable(),
  refreshed_at: z.number().nullable(),
});
export type financial_connections_account_owner = z.infer<typeof financial_connections_account_ownerValidator>;

export const financial_connections_sessionValidator = z.object({
  id: z.string(),
  account_holder: z.record(z.string().min(1), z.unknown()).nullable(),
  accounts: z.record(z.string().min(1), z.unknown()),
  filters: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  permissions: z.record(z.string().min(1), z.unknown()),
  return_url: z.string().nullable(),
});
export type financial_connections_session = z.infer<typeof financial_connections_sessionValidator>;

export const identity_verification_reportValidator = z.object({
  id: z.string(),
  created: z.number(),
  document: z.record(z.string().min(1), z.unknown()).nullable(),
  id_number: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  options: z.record(z.string().min(1), z.unknown()).nullable(),
  selfie: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string(),
  verification_session: z.string().nullable(),
});
export type identity_verification_report = z.infer<typeof identity_verification_reportValidator>;

export const identity_verification_sessionValidator = z.object({
  id: z.string(),
  created: z.number(),
  last_error: z.record(z.string().min(1), z.unknown()).nullable(),
  last_verification_report: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  options: z.record(z.string().min(1), z.unknown()).nullable(),
  redaction: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  type: z.string(),
  url: z.string().nullable(),
  verified_outputs: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type identity_verification_session = z.infer<typeof identity_verification_sessionValidator>;

export const invoiceitemValidator = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  customer: z.string().nullable(),
  date: z.number(),
  description: z.string().nullable(),
  discountable: z.boolean(),
  discounts: z.record(z.string().min(1), z.unknown()).nullable(),
  invoice: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  period: z.record(z.string().min(1), z.unknown()).nullable(),
  price: z.record(z.string().min(1), z.unknown()).nullable(),
  proration: z.boolean(),
  quantity: z.number(),
  subscription: z.string().nullable(),
  subscription_item: z.string().nullable(),
  tax_rates: z.record(z.string().min(1), z.unknown()).nullable(),
  unit_amount: z.number().nullable(),
  unit_amount_decimal: z.string().nullable(),
});
export type invoiceitem = z.infer<typeof invoiceitemValidator>;

export const invoiceValidator = z.object({
  id: z.string(),
  account_country: z.string().nullable(),
  account_name: z.string().nullable(),
  account_tax_ids: z.record(z.string().min(1), z.unknown()).nullable(),
  amount_due: z.number(),
  amount_paid: z.number(),
  amount_remaining: z.number(),
  application: z.string().nullable(),
  application_fee_amount: z.number().nullable(),
  attempt_count: z.number(),
  attempted: z.boolean(),
  auto_advance: z.boolean().nullable(),
  automatic_tax: z.record(z.string().min(1), z.unknown()).nullable(),
  billing_reason: z.string().nullable(),
  charge: z.string().nullable(),
  collection_method: z.string(),
  created: z.number(),
  currency: z.string(),
  custom_fields: z.record(z.string().min(1), z.unknown()).nullable(),
  customer: z.string().nullable(),
  customer_address: z.record(z.string().min(1), z.unknown()).nullable(),
  customer_email: z.string().nullable(),
  customer_name: z.string().nullable(),
  customer_phone: z.string().nullable(),
  customer_shipping: z.record(z.string().min(1), z.unknown()).nullable(),
  customer_tax_exempt: z.string().nullable(),
  customer_tax_ids: z.record(z.string().min(1), z.unknown()).nullable(),
  default_payment_method: z.string().nullable(),
  default_source: z.string().nullable(),
  default_tax_rates: z.record(z.string().min(1), z.unknown()),
  description: z.string().nullable(),
  discount: z.record(z.string().min(1), z.unknown()).nullable(),
  discounts: z.record(z.string().min(1), z.unknown()).nullable(),
  due_date: z.number().nullable(),
  ending_balance: z.number().nullable(),
  footer: z.string().nullable(),
  hosted_invoice_url: z.string().nullable(),
  invoice_pdf: z.string().nullable(),
  last_finalization_error: z.record(z.string().min(1), z.unknown()).nullable(),
  lines: z.record(z.string().min(1), z.unknown()),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  next_payment_attempt: z.number().nullable(),
  number: z.string().nullable(),
  object: z.string(),
  on_behalf_of: z.string().nullable(),
  paid: z.boolean(),
  paid_out_of_band: z.boolean(),
  payment_intent: z.string().nullable(),
  payment_settings: z.record(z.string().min(1), z.unknown()).nullable(),
  period_end: z.number(),
  period_start: z.number(),
  post_payment_credit_notes_amount: z.number(),
  pre_payment_credit_notes_amount: z.number(),
  quote: z.string().nullable(),
  receipt_number: z.string().nullable(),
  starting_balance: z.number(),
  statement_descriptor: z.string().nullable(),
  status: z.string().nullable(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
  subscription: z.string().nullable(),
  subscription_proration_date: z.number().nullable(),
  subtotal: z.number(),
  tax: z.number().nullable(),
  threshold_reason: z.record(z.string().min(1), z.unknown()).nullable(),
  total: z.number(),
  total_discount_amounts: z.record(z.string().min(1), z.unknown()).nullable(),
  total_tax_amounts: z.record(z.string().min(1), z.unknown()),
  transfer_data: z.record(z.string().min(1), z.unknown()).nullable(),
  webhooks_delivered_at: z.number().nullable(),
});
export type invoice = z.infer<typeof invoiceValidator>;

export const line_itemValidator = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  discount_amounts: z.record(z.string().min(1), z.unknown()).nullable(),
  discountable: z.boolean(),
  discounts: z.record(z.string().min(1), z.unknown()).nullable(),
  invoice_item: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  period: z.record(z.string().min(1), z.unknown()).nullable(),
  price: z.record(z.string().min(1), z.unknown()).nullable(),
  proration: z.boolean(),
  proration_details: z.record(z.string().min(1), z.unknown()).nullable(),
  quantity: z.number().nullable(),
  subscription: z.string().nullable(),
  subscription_item: z.string().nullable(),
  tax_amounts: z.record(z.string().min(1), z.unknown()).nullable(),
  tax_rates: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string(),
});
export type line_item = z.infer<typeof line_itemValidator>;

export const issuer_fraud_recordValidator = z.object({
  id: z.string(),
  actionable: z.boolean(),
  charge: z.string().nullable(),
  created: z.number(),
  fraud_type: z.string(),
  has_liability_shift: z.boolean(),
  livemode: z.boolean(),
  object: z.string(),
  post_date: z.number(),
});
export type issuer_fraud_record = z.infer<typeof issuer_fraud_recordValidator>;

export const issuing_authorizationValidator = z.object({
  id: z.string(),
  amount: z.number(),
  amount_details: z.record(z.string().min(1), z.unknown()).nullable(),
  approved: z.boolean(),
  authorization_method: z.string(),
  balance_transactions: z.record(z.string().min(1), z.unknown()),
  card: z.record(z.string().min(1), z.unknown()).nullable(),
  cardholder: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  livemode: z.boolean(),
  merchant_amount: z.number(),
  merchant_currency: z.string(),
  merchant_data: z.record(z.string().min(1), z.unknown()).nullable(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  pending_request: z.record(z.string().min(1), z.unknown()).nullable(),
  request_history: z.record(z.string().min(1), z.unknown()),
  status: z.string(),
  transactions: z.record(z.string().min(1), z.unknown()),
  treasury: z.record(z.string().min(1), z.unknown()).nullable(),
  verification_data: z.record(z.string().min(1), z.unknown()).nullable(),
  wallet: z.string().nullable(),
});
export type issuing_authorization = z.infer<typeof issuing_authorizationValidator>;

export const issuing_cardholderValidator = z.object({
  id: z.string(),
  billing: z.record(z.string().min(1), z.unknown()).nullable(),
  company: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  email: z.string().nullable(),
  individual: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  name: z.string(),
  object: z.string(),
  phone_number: z.string().nullable(),
  requirements: z.record(z.string().min(1), z.unknown()).nullable(),
  spending_controls: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  type: z.string(),
});
export type issuing_cardholder = z.infer<typeof issuing_cardholderValidator>;

export const issuing_cardValidator = z.object({
  id: z.string(),
  brand: z.string(),
  cancellation_reason: z.string().nullable(),
  cardholder: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string(),
  cvc: z.string().nullable(),
  exp_month: z.number(),
  exp_year: z.number(),
  financial_account: z.string().nullable(),
  last4: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  number: z.string().nullable(),
  object: z.string(),
  replaced_by: z.string().nullable(),
  replacement_for: z.string().nullable(),
  replacement_reason: z.string().nullable(),
  shipping: z.record(z.string().min(1), z.unknown()).nullable(),
  spending_controls: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  type: z.string(),
  wallets: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type issuing_card = z.infer<typeof issuing_cardValidator>;

export const issuing_disputeValidator = z.object({
  id: z.string(),
  amount: z.number(),
  balance_transactions: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string(),
  evidence: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  status: z.string(),
  transaction: z.string().nullable(),
  treasury: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type issuing_dispute = z.infer<typeof issuing_disputeValidator>;

export const issuing_settlementValidator = z.object({
  id: z.string(),
  bin: z.string(),
  clearing_date: z.number(),
  created: z.number(),
  currency: z.string(),
  interchange_fees: z.number(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  net_total: z.number(),
  network: z.string(),
  network_fees: z.number(),
  network_settlement_identifier: z.string(),
  object: z.string(),
  settlement_service: z.string(),
  transaction_count: z.number(),
  transaction_volume: z.number(),
});
export type issuing_settlement = z.infer<typeof issuing_settlementValidator>;

export const issuing_transactionValidator = z.object({
  id: z.string(),
  amount: z.number(),
  amount_details: z.record(z.string().min(1), z.unknown()).nullable(),
  authorization: z.string().nullable(),
  balance_transaction: z.string().nullable(),
  card: z.string().nullable(),
  cardholder: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  dispute: z.string().nullable(),
  livemode: z.boolean(),
  merchant_amount: z.number(),
  merchant_currency: z.string(),
  merchant_data: z.record(z.string().min(1), z.unknown()).nullable(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  purchase_details: z.record(z.string().min(1), z.unknown()).nullable(),
  treasury: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string(),
  wallet: z.string().nullable(),
});
export type issuing_transaction = z.infer<typeof issuing_transactionValidator>;

export const mandateValidator = z.object({
  id: z.string(),
  customer_acceptance: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  multi_use: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  payment_method: z.string().nullable(),
  payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  single_use: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  type: z.string(),
});
export type mandate = z.infer<typeof mandateValidator>;

export const orderValidator = z.object({
  id: z.string(),
  amount_subtotal: z.number(),
  amount_total: z.number(),
  application: z.string().nullable(),
  automatic_tax: z.record(z.string().min(1), z.unknown()).nullable(),
  billing_details: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  discounts: z.record(z.string().min(1), z.unknown()).nullable(),
  ip_address: z.string().nullable(),
  line_items: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  payment: z.record(z.string().min(1), z.unknown()).nullable(),
  shipping_cost: z.record(z.string().min(1), z.unknown()).nullable(),
  shipping_details: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  tax_details: z.record(z.string().min(1), z.unknown()).nullable(),
  total_details: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type order = z.infer<typeof orderValidator>;

export const payment_intentValidator = z.object({
  id: z.string(),
  amount: z.number(),
  amount_capturable: z.number().nullable(),
  amount_details: z.record(z.string().min(1), z.unknown()).nullable(),
  amount_received: z.number().nullable(),
  application: z.string().nullable(),
  application_fee_amount: z.number().nullable(),
  automatic_payment_methods: z.record(z.string().min(1), z.unknown()).nullable(),
  canceled_at: z.number().nullable(),
  cancellation_reason: z.string().nullable(),
  capture_method: z.string(),
  charges: z.record(z.string().min(1), z.unknown()).nullable(),
  confirmation_method: z.string(),
  created: z.number(),
  currency: z.string(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  invoice: z.string().nullable(),
  last_payment_error: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  next_action: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  on_behalf_of: z.string().nullable(),
  payment_method: z.string().nullable(),
  payment_method_options: z.record(z.string().min(1), z.unknown()).nullable(),
  payment_method_types: z.record(z.string().min(1), z.unknown()),
  processing: z.record(z.string().min(1), z.unknown()).nullable(),
  receipt_email: z.string().nullable(),
  review: z.string().nullable(),
  setup_future_usage: z.string().nullable(),
  shipping: z.record(z.string().min(1), z.unknown()).nullable(),
  statement_descriptor: z.string().nullable(),
  statement_descriptor_suffix: z.string().nullable(),
  status: z.string(),
  transfer_data: z.record(z.string().min(1), z.unknown()).nullable(),
  transfer_group: z.string().nullable(),
});
export type payment_intent = z.infer<typeof payment_intentValidator>;

export const payment_linkValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  after_completion: z.record(z.string().min(1), z.unknown()).nullable(),
  allow_promotion_codes: z.boolean(),
  application_fee_amount: z.number().nullable(),
  application_fee_percent: z.number().nullable(),
  automatic_tax: z.record(z.string().min(1), z.unknown()).nullable(),
  billing_address_collection: z.string(),
  consent_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  customer_creation: z.string(),
  line_items: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  on_behalf_of: z.string().nullable(),
  payment_intent_data: z.record(z.string().min(1), z.unknown()).nullable(),
  payment_method_types: z.record(z.string().min(1), z.unknown()).nullable(),
  phone_number_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  shipping_address_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  shipping_options: z.record(z.string().min(1), z.unknown()),
  submit_type: z.string(),
  subscription_data: z.record(z.string().min(1), z.unknown()).nullable(),
  tax_id_collection: z.record(z.string().min(1), z.unknown()).nullable(),
  transfer_data: z.record(z.string().min(1), z.unknown()).nullable(),
  url: z.string(),
});
export type payment_link = z.infer<typeof payment_linkValidator>;

export const payoutValidator = z.object({
  id: z.string(),
  amount: z.number(),
  arrival_date: z.number(),
  automatic: z.boolean(),
  balance_transaction: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  destination: z.string().nullable(),
  failure_balance_transaction: z.string().nullable(),
  failure_code: z.string().nullable(),
  failure_message: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  method: z.string(),
  object: z.string(),
  original_payout: z.string().nullable(),
  reversed_by: z.string().nullable(),
  source_type: z.string(),
  statement_descriptor: z.string().nullable(),
  status: z.string(),
  type: z.string(),
});
export type payout = z.infer<typeof payoutValidator>;

export const planValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  aggregate_usage: z.string().nullable(),
  amount: z.number().nullable(),
  amount_decimal: z.string().nullable(),
  billing_scheme: z.string(),
  created: z.number(),
  currency: z.string(),
  interval: z.string(),
  interval_count: z.number(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  nickname: z.string().nullable(),
  object: z.string(),
  product: z.string().nullable(),
  tiers: z.record(z.string().min(1), z.unknown()).nullable(),
  tiers_mode: z.string().nullable(),
  transform_usage: z.record(z.string().min(1), z.unknown()).nullable(),
  trial_period_days: z.number().nullable(),
  usage_type: z.string(),
});
export type plan = z.infer<typeof planValidator>;

export const priceValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  billing_scheme: z.string(),
  created: z.number(),
  currency: z.string(),
  custom_unit_amount: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  lookup_key: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()),
  nickname: z.string().nullable(),
  object: z.string(),
  product: z.string().nullable(),
  recurring: z.record(z.string().min(1), z.unknown()).nullable(),
  tax_behavior: z.string().nullable(),
  tiers: z.record(z.string().min(1), z.unknown()).nullable(),
  tiers_mode: z.string().nullable(),
  transform_quantity: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string(),
  unit_amount: z.number().nullable(),
  unit_amount_decimal: z.string().nullable(),
});
export type price = z.infer<typeof priceValidator>;

export const productValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  created: z.number(),
  default_price: z.string().nullable(),
  description: z.string().nullable(),
  images: z.record(z.string().min(1), z.unknown()),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  name: z.string(),
  object: z.string(),
  package_dimensions: z.record(z.string().min(1), z.unknown()).nullable(),
  shippable: z.boolean().nullable(),
  statement_descriptor: z.string().nullable(),
  tax_code: z.string().nullable(),
  unit_label: z.string().nullable(),
  updated: z.number(),
  url: z.string().nullable(),
});
export type product = z.infer<typeof productValidator>;

export const promotion_codeValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  code: z.string(),
  coupon: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  customer: z.string().nullable(),
  expires_at: z.number().nullable(),
  livemode: z.boolean(),
  max_redemptions: z.number().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  restrictions: z.record(z.string().min(1), z.unknown()).nullable(),
  times_redeemed: z.number(),
});
export type promotion_code = z.infer<typeof promotion_codeValidator>;

export const quoteValidator = z.object({
  id: z.string(),
  amount_subtotal: z.number(),
  amount_total: z.number(),
  application: z.string().nullable(),
  application_fee_amount: z.number().nullable(),
  application_fee_percent: z.number().nullable(),
  automatic_tax: z.record(z.string().min(1), z.unknown()).nullable(),
  collection_method: z.string(),
  computed: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string().nullable(),
  customer: z.string().nullable(),
  default_tax_rates: z.record(z.string().min(1), z.unknown()).nullable(),
  description: z.string().nullable(),
  discounts: z.record(z.string().min(1), z.unknown()),
  expires_at: z.number(),
  footer: z.string().nullable(),
  from_quote: z.record(z.string().min(1), z.unknown()).nullable(),
  header: z.string().nullable(),
  invoice: z.string().nullable(),
  invoice_settings: z.record(z.string().min(1), z.unknown()).nullable(),
  line_items: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  number: z.string().nullable(),
  object: z.string(),
  on_behalf_of: z.string().nullable(),
  status: z.string(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
  subscription: z.string().nullable(),
  subscription_data: z.record(z.string().min(1), z.unknown()).nullable(),
  subscription_schedule: z.string().nullable(),
  total_details: z.record(z.string().min(1), z.unknown()).nullable(),
  transfer_data: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type quote = z.infer<typeof quoteValidator>;

export const radar_early_fraud_warningValidator = z.object({
  id: z.string(),
  actionable: z.boolean(),
  charge: z.string().nullable(),
  created: z.number(),
  fraud_type: z.string(),
  livemode: z.boolean(),
  object: z.string(),
  payment_intent: z.string().nullable(),
});
export type radar_early_fraud_warning = z.infer<typeof radar_early_fraud_warningValidator>;

export const radar_value_list_itemValidator = z.object({
  id: z.string(),
  created: z.number(),
  created_by: z.string(),
  livemode: z.boolean(),
  object: z.string(),
  value: z.string(),
  value_list: z.string(),
});
export type radar_value_list_item = z.infer<typeof radar_value_list_itemValidator>;

export const radar_value_listValidator = z.object({
  id: z.string(),
  alias: z.string(),
  created: z.number(),
  created_by: z.string(),
  item_type: z.string(),
  list_items: z.record(z.string().min(1), z.unknown()),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  name: z.string(),
  object: z.string(),
});
export type radar_value_list = z.infer<typeof radar_value_listValidator>;

export const recipientValidator = z.object({
  id: z.string(),
  active_account: z.record(z.string().min(1), z.unknown()).nullable(),
  cards: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  default_card: z.string().nullable(),
  description: z.string().nullable(),
  email: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  migrated_to: z.string().nullable(),
  name: z.string().nullable(),
  object: z.string(),
  rolled_back_from: z.string().nullable(),
  type: z.string(),
});
export type recipient = z.infer<typeof recipientValidator>;

export const reporting_report_runValidator = z.object({
  id: z.string(),
  created: z.number(),
  error: z.string().nullable(),
  livemode: z.boolean(),
  object: z.string(),
  parameters: z.record(z.string().min(1), z.unknown()).nullable(),
  report_type: z.string(),
  result: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  succeeded_at: z.number().nullable(),
});
export type reporting_report_run = z.infer<typeof reporting_report_runValidator>;

export const reporting_report_typeValidator = z.object({
  id: z.string(),
  data_available_end: z.number(),
  data_available_start: z.number(),
  default_columns: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  name: z.string(),
  object: z.string(),
  updated: z.number(),
  version: z.number(),
});
export type reporting_report_type = z.infer<typeof reporting_report_typeValidator>;

export const reviewValidator = z.object({
  id: z.string(),
  billing_zip: z.string().nullable(),
  charge: z.string().nullable(),
  closed_reason: z.string().nullable(),
  created: z.number(),
  ip_address: z.string().nullable(),
  ip_address_location: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  open: z.boolean(),
  opened_reason: z.string(),
  payment_intent: z.string().nullable(),
  reason: z.string(),
  session: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type review = z.infer<typeof reviewValidator>;

export const setup_attemptValidator = z.object({
  id: z.string(),
  application: z.string().nullable(),
  attach_to_self: z.boolean().nullable(),
  created: z.number(),
  customer: z.string().nullable(),
  flow_directions: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  on_behalf_of: z.string().nullable(),
  payment_method: z.string().nullable(),
  payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  setup_error: z.record(z.string().min(1), z.unknown()).nullable(),
  setup_intent: z.string().nullable(),
  status: z.string(),
  usage: z.string(),
});
export type setup_attempt = z.infer<typeof setup_attemptValidator>;

export const setup_intentValidator = z.object({
  id: z.string(),
  application: z.string().nullable(),
  attach_to_self: z.boolean().nullable(),
  cancellation_reason: z.string().nullable(),
  created: z.number(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  flow_directions: z.record(z.string().min(1), z.unknown()).nullable(),
  last_setup_error: z.record(z.string().min(1), z.unknown()).nullable(),
  latest_attempt: z.string().nullable(),
  livemode: z.boolean(),
  mandate: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  next_action: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  on_behalf_of: z.string().nullable(),
  payment_method: z.string().nullable(),
  payment_method_options: z.record(z.string().min(1), z.unknown()).nullable(),
  payment_method_types: z.record(z.string().min(1), z.unknown()),
  single_use_mandate: z.string().nullable(),
  status: z.string(),
  usage: z.string(),
});
export type setup_intent = z.infer<typeof setup_intentValidator>;

export const shipping_rateValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  created: z.number(),
  delivery_estimate: z.record(z.string().min(1), z.unknown()).nullable(),
  display_name: z.string().nullable(),
  fixed_amount: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  tax_behavior: z.string().nullable(),
  tax_code: z.string().nullable(),
  type: z.string(),
});
export type shipping_rate = z.infer<typeof shipping_rateValidator>;

export const scheduled_query_runValidator = z.object({
  id: z.string(),
  created: z.number(),
  data_load_time: z.number(),
  error: z.record(z.string().min(1), z.unknown()).nullable(),
  file: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  result_available_until: z.number(),
  sql: z.string(),
  status: z.string(),
  title: z.string(),
});
export type scheduled_query_run = z.infer<typeof scheduled_query_runValidator>;

export const skuValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  attributes: z.record(z.string().min(1), z.unknown()),
  created: z.number(),
  currency: z.string(),
  image: z.string().nullable(),
  inventory: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  package_dimensions: z.record(z.string().min(1), z.unknown()).nullable(),
  price: z.number(),
  product: z.string().nullable(),
  updated: z.number(),
});
export type sku = z.infer<typeof skuValidator>;

export const sourceValidator = z.object({
  id: z.string(),
  ach_credit_transfer: z.record(z.string().min(1), z.unknown()).nullable(),
  ach_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  acss_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  alipay: z.record(z.string().min(1), z.unknown()).nullable(),
  amount: z.number().nullable(),
  au_becs_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  bancontact: z.record(z.string().min(1), z.unknown()).nullable(),
  card: z.record(z.string().min(1), z.unknown()).nullable(),
  card_present: z.record(z.string().min(1), z.unknown()).nullable(),
  code_verification: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string().nullable(),
  customer: z.string().nullable(),
  eps: z.record(z.string().min(1), z.unknown()).nullable(),
  flow: z.string(),
  giropay: z.record(z.string().min(1), z.unknown()).nullable(),
  ideal: z.record(z.string().min(1), z.unknown()).nullable(),
  klarna: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  multibanco: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  owner: z.record(z.string().min(1), z.unknown()).nullable(),
  p24: z.record(z.string().min(1), z.unknown()).nullable(),
  receiver: z.record(z.string().min(1), z.unknown()).nullable(),
  redirect: z.record(z.string().min(1), z.unknown()).nullable(),
  sepa_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  sofort: z.record(z.string().min(1), z.unknown()).nullable(),
  source_order: z.record(z.string().min(1), z.unknown()).nullable(),
  statement_descriptor: z.string().nullable(),
  status: z.string(),
  three_d_secure: z.record(z.string().min(1), z.unknown()).nullable(),
  type: z.string(),
  usage: z.string().nullable(),
  wechat: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type source = z.infer<typeof sourceValidator>;

export const source_mandate_notificationValidator = z.object({
  id: z.string(),
  acss_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  amount: z.number().nullable(),
  bacs_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  livemode: z.boolean(),
  object: z.string(),
  reason: z.string(),
  sepa_debit: z.record(z.string().min(1), z.unknown()).nullable(),
  source: z.record(z.string().min(1), z.unknown()).nullable(),
  status: z.string(),
  type: z.string(),
});
export type source_mandate_notification = z.infer<typeof source_mandate_notificationValidator>;

export const source_transactionValidator = z.object({
  id: z.string(),
  ach_credit_transfer: z.record(z.string().min(1), z.unknown()).nullable(),
  amount: z.number(),
  chf_credit_transfer: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string(),
  gbp_credit_transfer: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  object: z.string(),
  paper_check: z.record(z.string().min(1), z.unknown()).nullable(),
  sepa_credit_transfer: z.record(z.string().min(1), z.unknown()).nullable(),
  source: z.string(),
  status: z.string(),
  type: z.string(),
});
export type source_transaction = z.infer<typeof source_transactionValidator>;

export const subscription_itemValidator = z.object({
  id: z.string(),
  billing_thresholds: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  price: z.record(z.string().min(1), z.unknown()).nullable(),
  quantity: z.number().nullable(),
  subscription: z.string(),
  tax_rates: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type subscription_item = z.infer<typeof subscription_itemValidator>;

export const usage_record_summaryValidator = z.object({
  id: z.string(),
  invoice: z.string().nullable(),
  livemode: z.boolean(),
  object: z.string(),
  period: z.record(z.string().min(1), z.unknown()).nullable(),
  subscription_item: z.string(),
  total_usage: z.number(),
});
export type usage_record_summary = z.infer<typeof usage_record_summaryValidator>;

export const subscription_scheduleValidator = z.object({
  id: z.string(),
  application: z.string().nullable(),
  canceled_at: z.number().nullable(),
  completed_at: z.number().nullable(),
  created: z.number(),
  current_phase: z.record(z.string().min(1), z.unknown()).nullable(),
  customer: z.string().nullable(),
  default_settings: z.record(z.string().min(1), z.unknown()).nullable(),
  end_behavior: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  phases: z.record(z.string().min(1), z.unknown()),
  released_at: z.number().nullable(),
  released_subscription: z.string().nullable(),
  status: z.string(),
  subscription: z.string().nullable(),
});
export type subscription_schedule = z.infer<typeof subscription_scheduleValidator>;

export const tax_codeValidator = z.object({
  id: z.string(),
  description: z.string(),
  name: z.string(),
  object: z.string(),
});
export type tax_code = z.infer<typeof tax_codeValidator>;

export const tax_rateValidator = z.object({
  id: z.string(),
  active: z.boolean(),
  country: z.string().nullable(),
  created: z.number(),
  description: z.string().nullable(),
  display_name: z.string(),
  inclusive: z.boolean(),
  jurisdiction: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  percentage: z.number(),
  state: z.string().nullable(),
  tax_type: z.string().nullable(),
});
export type tax_rate = z.infer<typeof tax_rateValidator>;

export const terminal_configurationValidator = z.object({
  id: z.string(),
  bbpos_wisepos_e: z.record(z.string().min(1), z.unknown()).nullable(),
  is_account_default: z.boolean().nullable(),
  livemode: z.boolean(),
  object: z.string(),
  tipping: z.record(z.string().min(1), z.unknown()).nullable(),
  verifone_p400: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type terminal_configuration = z.infer<typeof terminal_configurationValidator>;

export const terminal_locationValidator = z.object({
  id: z.string(),
  address: z.record(z.string().min(1), z.unknown()).nullable(),
  configuration_overrides: z.string().nullable(),
  display_name: z.string(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
});
export type terminal_location = z.infer<typeof terminal_locationValidator>;

export const terminal_readerValidator = z.object({
  id: z.string(),
  action: z.record(z.string().min(1), z.unknown()).nullable(),
  device_sw_version: z.string().nullable(),
  device_type: z.string(),
  ip_address: z.string().nullable(),
  label: z.string(),
  livemode: z.boolean(),
  location: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  serial_number: z.string(),
  status: z.string().nullable(),
});
export type terminal_reader = z.infer<typeof terminal_readerValidator>;

export const tokenValidator = z.object({
  id: z.string(),
  bank_account: z.record(z.string().min(1), z.unknown()).nullable(),
  card: z.record(z.string().min(1), z.unknown()).nullable(),
  client_ip: z.string().nullable(),
  created: z.number(),
  livemode: z.boolean(),
  object: z.string(),
  type: z.string(),
  used: z.boolean(),
});
export type token = z.infer<typeof tokenValidator>;

export const topupValidator = z.object({
  id: z.string(),
  amount: z.number(),
  balance_transaction: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  expected_availability_date: z.number().nullable(),
  failure_code: z.string().nullable(),
  failure_message: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  source: z.record(z.string().min(1), z.unknown()).nullable(),
  statement_descriptor: z.string().nullable(),
  status: z.string(),
  transfer_group: z.string().nullable(),
});
export type topup = z.infer<typeof topupValidator>;

export const transferValidator = z.object({
  id: z.string(),
  amount: z.number(),
  amount_reversed: z.number(),
  balance_transaction: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  destination: z.string().nullable(),
  destination_payment: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  reversals: z.record(z.string().min(1), z.unknown()),
  reversed: z.boolean(),
  source_transaction: z.string().nullable(),
  source_type: z.string().nullable(),
  transfer_group: z.string().nullable(),
});
export type transfer = z.infer<typeof transferValidator>;

export const transfer_reversalValidator = z.object({
  id: z.string(),
  amount: z.number(),
  balance_transaction: z.string().nullable(),
  created: z.number(),
  currency: z.string(),
  destination_payment_refund: z.string().nullable(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  source_refund: z.string().nullable(),
  transfer: z.string().nullable(),
});
export type transfer_reversal = z.infer<typeof transfer_reversalValidator>;

export const treasury_credit_reversalValidator = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  financial_account: z.string(),
  hosted_regulatory_receipt_url: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  network: z.string(),
  object: z.string(),
  received_credit: z.string(),
  status: z.string(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
  transaction: z.string().nullable(),
});
export type treasury_credit_reversal = z.infer<typeof treasury_credit_reversalValidator>;

export const treasury_debit_reversalValidator = z.object({
  id: z.string(),
  amount: z.number(),
  currency: z.string(),
  financial_account: z.string().nullable(),
  hosted_regulatory_receipt_url: z.string().nullable(),
  linked_flows: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  network: z.string(),
  object: z.string(),
  received_debit: z.string(),
  status: z.string(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
  transaction: z.string().nullable(),
});
export type treasury_debit_reversal = z.infer<typeof treasury_debit_reversalValidator>;

export const treasury_financial_accountValidator = z.object({
  id: z.string(),
  active_features: z.record(z.string().min(1), z.unknown()),
  balance: z.record(z.string().min(1), z.unknown()).nullable(),
  country: z.string(),
  created: z.number(),
  features: z.record(z.string().min(1), z.unknown()).nullable(),
  financial_addresses: z.record(z.string().min(1), z.unknown()),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  pending_features: z.record(z.string().min(1), z.unknown()),
  platform_restrictions: z.record(z.string().min(1), z.unknown()).nullable(),
  restricted_features: z.record(z.string().min(1), z.unknown()),
  status: z.string(),
  status_details: z.record(z.string().min(1), z.unknown()).nullable(),
  supported_currencies: z.record(z.string().min(1), z.unknown()),
});
export type treasury_financial_account = z.infer<typeof treasury_financial_accountValidator>;

export const treasury_financial_account_featuresValidator = z.object({
  id: z.string(),
  card_issuing: z.record(z.string().min(1), z.unknown()).nullable(),
  deposit_insurance: z.record(z.string().min(1), z.unknown()).nullable(),
  financial_addresses: z.record(z.string().min(1), z.unknown()).nullable(),
  inbound_transfers: z.record(z.string().min(1), z.unknown()).nullable(),
  intra_stripe_flows: z.record(z.string().min(1), z.unknown()).nullable(),
  object: z.string(),
  outbound_payments: z.record(z.string().min(1), z.unknown()).nullable(),
  outbound_transfers: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type treasury_financial_account_features = z.infer<typeof treasury_financial_account_featuresValidator>;

export const treasury_inbound_transferValidator = z.object({
  id: z.string(),
  amount: z.number(),
  cancelable: z.boolean(),
  created: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  failure_details: z.record(z.string().min(1), z.unknown()).nullable(),
  financial_account: z.string(),
  hosted_regulatory_receipt_url: z.string().nullable(),
  linked_flows: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  origin_payment_method: z.string(),
  origin_payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  returned: z.boolean().nullable(),
  statement_descriptor: z.string(),
  status: z.string(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
  transaction: z.string().nullable(),
});
export type treasury_inbound_transfer = z.infer<typeof treasury_inbound_transferValidator>;

export const treasury_outbound_paymentValidator = z.object({
  id: z.string(),
  amount: z.number(),
  cancelable: z.boolean(),
  created: z.number(),
  currency: z.string(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  destination_payment_method: z.string().nullable(),
  destination_payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  end_user_details: z.record(z.string().min(1), z.unknown()).nullable(),
  expected_arrival_date: z.number(),
  financial_account: z.string(),
  hosted_regulatory_receipt_url: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  returned_details: z.record(z.string().min(1), z.unknown()).nullable(),
  statement_descriptor: z.string(),
  status: z.string(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
  transaction: z.string().nullable(),
});
export type treasury_outbound_payment = z.infer<typeof treasury_outbound_paymentValidator>;

export const treasury_outbound_transferValidator = z.object({
  id: z.string(),
  amount: z.number(),
  cancelable: z.boolean(),
  created: z.number(),
  currency: z.string(),
  description: z.string().nullable(),
  destination_payment_method: z.string(),
  destination_payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  expected_arrival_date: z.number(),
  financial_account: z.string(),
  hosted_regulatory_receipt_url: z.string().nullable(),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  returned_details: z.record(z.string().min(1), z.unknown()).nullable(),
  statement_descriptor: z.string(),
  status: z.string(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
  transaction: z.string().nullable(),
});
export type treasury_outbound_transfer = z.infer<typeof treasury_outbound_transferValidator>;

export const treasury_received_creditValidator = z.object({
  id: z.string(),
  amount: z.number(),
  created: z.number(),
  currency: z.string(),
  description: z.string(),
  failure_code: z.string().nullable(),
  financial_account: z.string().nullable(),
  initiating_payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  linked_flows: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  network: z.string(),
  object: z.string(),
  status: z.string(),
  transaction: z.string().nullable(),
});
export type treasury_received_credit = z.infer<typeof treasury_received_creditValidator>;

export const treasury_received_debitValidator = z.object({
  id: z.string(),
  amount: z.number(),
  created: z.number(),
  currency: z.string(),
  description: z.string(),
  failure_code: z.string().nullable(),
  financial_account: z.string().nullable(),
  initiating_payment_method_details: z.record(z.string().min(1), z.unknown()).nullable(),
  linked_flows: z.record(z.string().min(1), z.unknown()).nullable(),
  livemode: z.boolean(),
  network: z.string(),
  object: z.string(),
  status: z.string(),
  transaction: z.string().nullable(),
});
export type treasury_received_debit = z.infer<typeof treasury_received_debitValidator>;

export const treasury_transaction_entryValidator = z.object({
  id: z.string(),
  balance_impact: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string(),
  effective_at: z.number(),
  financial_account: z.string(),
  flow: z.string().nullable(),
  flow_details: z.record(z.string().min(1), z.unknown()).nullable(),
  flow_type: z.string(),
  livemode: z.boolean(),
  object: z.string(),
  transaction: z.string().nullable(),
  type: z.string(),
});
export type treasury_transaction_entry = z.infer<typeof treasury_transaction_entryValidator>;

export const treasury_transactionValidator = z.object({
  id: z.string(),
  amount: z.number(),
  balance_impact: z.record(z.string().min(1), z.unknown()).nullable(),
  created: z.number(),
  currency: z.string(),
  description: z.string(),
  entries: z.record(z.string().min(1), z.unknown()).nullable(),
  financial_account: z.string(),
  flow: z.string().nullable(),
  flow_details: z.record(z.string().min(1), z.unknown()).nullable(),
  flow_type: z.string(),
  livemode: z.boolean(),
  object: z.string(),
  status: z.string(),
  status_transitions: z.record(z.string().min(1), z.unknown()).nullable(),
});
export type treasury_transaction = z.infer<typeof treasury_transactionValidator>;

export const webhook_endpointValidator = z.object({
  id: z.string(),
  api_version: z.string().nullable(),
  application: z.string().nullable(),
  created: z.number(),
  description: z.string().nullable(),
  enabled_events: z.record(z.string().min(1), z.unknown()),
  livemode: z.boolean(),
  metadata: z.record(z.string().min(1), z.unknown()),
  object: z.string(),
  secret: z.string().nullable(),
  status: z.string(),
  url: z.string(),
});
export type webhook_endpoint = z.infer<typeof webhook_endpointValidator>;

export const _sync_eventsValidator = z.object({
  idempotency_key: z.string(),
  event_id: z.string().nullable(),
  object_id: z.string().nullable(),
  created: z.number().nullable(),
});
export type _sync_events = z.infer<typeof _sync_eventsValidator>;

export const database = z.object({
  Example: ExampleValidator,
  VerificationToken: VerificationTokenValidator,
  User: UserValidator,
  Collection: CollectionValidator,
  Session: SessionValidator,
  Account: AccountValidator,
  "stripe.customer": customerValidator,
  "stripe.application": applicationValidator,
  "stripe.three_d_secure": three_d_secureValidator,
  "stripe.account": accountValidator,
  "stripe.capability": capabilityValidator,
  "stripe.bank_account": bank_accountValidator,
  "stripe.person": personValidator,
  "stripe.apple_pay_domain": apple_pay_domainValidator,
  "stripe.application_fee": application_feeValidator,
  "stripe.fee_refund": fee_refundValidator,
  "stripe.apps_secret": apps_secretValidator,
  "stripe.balance": balanceValidator,
  "stripe.balance_transaction": balance_transactionValidator,
  "stripe.billing_portal_configuration": billing_portal_configurationValidator,
  "stripe.bitcoin_receiver": bitcoin_receiverValidator,
  "stripe.bitcoin_transaction": bitcoin_transactionValidator,
  "stripe.charge": chargeValidator,
  "stripe.dispute": disputeValidator,
  "stripe.refund": refundValidator,
  "stripe.checkout_session": checkout_sessionValidator,
  "stripe.item": itemValidator,
  "stripe.country_spec": country_specValidator,
  "stripe.coupon": couponValidator,
  "stripe.credit_note": credit_noteValidator,
  "stripe.credit_note_line_item": credit_note_line_itemValidator,
  "stripe.customer_balance_transaction": customer_balance_transactionValidator,
  "stripe.card": cardValidator,
  "stripe.cash_balance": cash_balanceValidator,
  "stripe.discount": discountValidator,
  "stripe.payment_method": payment_methodValidator,
  "stripe.alipay_account": alipay_accountValidator,
  "stripe.subscription": subscriptionValidator,
  "stripe.tax_id": tax_idValidator,
  "stripe.event": eventValidator,
  "stripe.exchange_rate": exchange_rateValidator,
  "stripe.file_link": file_linkValidator,
  "stripe.file": fileValidator,
  "stripe.financial_connections_account": financial_connections_accountValidator,
  "stripe.financial_connections_account_owner": financial_connections_account_ownerValidator,
  "stripe.financial_connections_session": financial_connections_sessionValidator,
  "stripe.identity_verification_report": identity_verification_reportValidator,
  "stripe.identity_verification_session": identity_verification_sessionValidator,
  "stripe.invoiceitem": invoiceitemValidator,
  "stripe.invoice": invoiceValidator,
  "stripe.line_item": line_itemValidator,
  "stripe.issuer_fraud_record": issuer_fraud_recordValidator,
  "stripe.issuing_authorization": issuing_authorizationValidator,
  "stripe.issuing_cardholder": issuing_cardholderValidator,
  "stripe.issuing_card": issuing_cardValidator,
  "stripe.issuing_dispute": issuing_disputeValidator,
  "stripe.issuing_settlement": issuing_settlementValidator,
  "stripe.issuing_transaction": issuing_transactionValidator,
  "stripe.mandate": mandateValidator,
  "stripe.order": orderValidator,
  "stripe.payment_intent": payment_intentValidator,
  "stripe.payment_link": payment_linkValidator,
  "stripe.payout": payoutValidator,
  "stripe.plan": planValidator,
  "stripe.price": priceValidator,
  "stripe.product": productValidator,
  "stripe.promotion_code": promotion_codeValidator,
  "stripe.quote": quoteValidator,
  "stripe.radar_early_fraud_warning": radar_early_fraud_warningValidator,
  "stripe.radar_value_list_item": radar_value_list_itemValidator,
  "stripe.radar_value_list": radar_value_listValidator,
  "stripe.recipient": recipientValidator,
  "stripe.reporting_report_run": reporting_report_runValidator,
  "stripe.reporting_report_type": reporting_report_typeValidator,
  "stripe.review": reviewValidator,
  "stripe.setup_attempt": setup_attemptValidator,
  "stripe.setup_intent": setup_intentValidator,
  "stripe.shipping_rate": shipping_rateValidator,
  "stripe.scheduled_query_run": scheduled_query_runValidator,
  "stripe.sku": skuValidator,
  "stripe.source": sourceValidator,
  "stripe.source_mandate_notification": source_mandate_notificationValidator,
  "stripe.source_transaction": source_transactionValidator,
  "stripe.subscription_item": subscription_itemValidator,
  "stripe.usage_record_summary": usage_record_summaryValidator,
  "stripe.subscription_schedule": subscription_scheduleValidator,
  "stripe.tax_code": tax_codeValidator,
  "stripe.tax_rate": tax_rateValidator,
  "stripe.terminal_configuration": terminal_configurationValidator,
  "stripe.terminal_location": terminal_locationValidator,
  "stripe.terminal_reader": terminal_readerValidator,
  "stripe.token": tokenValidator,
  "stripe.topup": topupValidator,
  "stripe.transfer": transferValidator,
  "stripe.transfer_reversal": transfer_reversalValidator,
  "stripe.treasury_credit_reversal": treasury_credit_reversalValidator,
  "stripe.treasury_debit_reversal": treasury_debit_reversalValidator,
  "stripe.treasury_financial_account": treasury_financial_accountValidator,
  "stripe.treasury_financial_account_features": treasury_financial_account_featuresValidator,
  "stripe.treasury_inbound_transfer": treasury_inbound_transferValidator,
  "stripe.treasury_outbound_payment": treasury_outbound_paymentValidator,
  "stripe.treasury_outbound_transfer": treasury_outbound_transferValidator,
  "stripe.treasury_received_credit": treasury_received_creditValidator,
  "stripe.treasury_received_debit": treasury_received_debitValidator,
  "stripe.treasury_transaction_entry": treasury_transaction_entryValidator,
  "stripe.treasury_transaction": treasury_transactionValidator,
  "stripe.webhook_endpoint": webhook_endpointValidator,
  "stripe._sync_events": _sync_eventsValidator,
});
export type Database = z.infer<typeof database>;

