import { getStableImageSrc } from '@/utils/getStableImageSrc';
import Airtable from 'airtable';
import { z } from 'zod';

export function toTitleCase(str: string) {
  return str.replace(/\w\S*/g, (txt) => {
    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
  });
}

export function formatRecord<T extends Airtable.FieldSet>(
  record: Airtable.Record<T>
) {
  const fields = {} as Record<string, any>;
  for (const [key, value] of Object.entries(record._rawJson.fields)) {
    fields[toTitleCase(key)] = value;
  }
  return { ...record._rawJson, fields };
}

const StableAirtableImageUrl = z.preprocess(
  (url) => getStableImageSrc(String(url)),
  z.string()
);
const AirtableThumbnailsValidator = z.object({
  small: z.object({
    url: StableAirtableImageUrl,
    width: z.number(),
    height: z.number(),
  }),
  large: z.object({
    url: StableAirtableImageUrl,
    width: z.number(),
    height: z.number(),
  }),
  full: z.object({
    url: StableAirtableImageUrl,
    width: z.number(),
    height: z.number(),
  }),
});

const AirtableProfilePictureValidator = z.array(
  z
    .object({
      id: z.string(),
      width: z.number(),
      height: z.number(),
      url: StableAirtableImageUrl,
      filename: z.string(),
      size: z.number(),
      type: z.string(),
      thumbnails: AirtableThumbnailsValidator,
    })
    .optional()
);

const TestimonialImage = z.object({
  url: StableAirtableImageUrl,
  width: z.number(),
  height: z.number(),
});
const TestimonialImages = z.array(TestimonialImage);

export const AirtableTestimonialValidator = z.object({
  Name: z.string().min(1),
  Quote: z.string().min(1),
  'Source URL': z.string().optional(),
  'Company URL': z.string().optional(),
  'Video URL': z.string().optional(),
  Images: TestimonialImages.optional(),
  'Profile URL': z.string().optional(),
  'Profile Picture': AirtableProfilePictureValidator.optional(),
  Verified: z.preprocess((d) => Boolean(d), z.boolean()).optional(),
  Approved: z.preprocess((d) => Boolean(d), z.boolean()).optional(),
  'Title / Company': z.string().optional(),
});

export const TestimonialValidator = z.object({
  id: z.string(),
  created_at: z.date(),
  name: z.string().min(1),
  quote: z.string().min(1),
  source_url: z.string().optional(),
  company_url: z.string().optional(),
  video_url: z.string().optional(),
  images: TestimonialImages.optional(),
  profile_url: z.string().optional(),
  profile_picture_url: z.string().optional(),
  verified: z.boolean().optional(),
  approved: z.boolean().optional(),
  title_or_company: z.string().optional(),
});
export type Testimonial = z.infer<typeof TestimonialValidator>;

export type AirtableTestimonial = z.infer<typeof AirtableTestimonialValidator>;

export const TestimonialRecordValidator = z.object({
  id: z.string(),
  createdTime: z.preprocess((d) => new Date(d as any), z.date()),
  fields: AirtableTestimonialValidator,
});
export type AirtableTestimonialRecord = z.infer<
  typeof TestimonialRecordValidator
>;

export const TestimonialRecordsValidator = z.array(
  AirtableTestimonialValidator
);

function isValidTestimonialRecord(
  data: any
): data is AirtableTestimonialRecord {
  const result = TestimonialRecordValidator.safeParse(data);
  return result.success && !!result.data.fields.Approved;
}

export function filterValidTestimonials(
  data: any
): AirtableTestimonialRecord[] {
  const records = [] as AirtableTestimonialRecord[];
  for (const record of data) {
    const result = TestimonialRecordValidator.safeParse(record);
    if (result.success) {
      records.push(result.data);
    }
  }
  return records;
  return data.filter(isValidTestimonialRecord);
}
