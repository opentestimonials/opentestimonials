import { z } from 'zod';

export const airtableUrlRegex = /airtable.com\/(app.*)\/(tbl.*)\//gm;

export function getAirtableParts(url: string) {
  const match = new RegExp(airtableUrlRegex).exec(url);
  if (!match) {
    throw new Error(`Invalid Airtable URL: ${url}`);
  }
  return {
    baseId: match[1],
    tableId: match[2],
  };
}

export const CreateCollectionValidator = z.object({
  ownerId: z.string().min(1),
  subdomain: z.string().min(1, { message: 'Choose a subdomain.' }),
  airtableUrl: z
    .string()
    .min(1, { message: 'Enter your Airtable URL.' })
    .regex(airtableUrlRegex, {
      // .regex(/airtable.com\/(app.*)/gm, {
      message: 'Invalid Airtable url.',
    }), // https://regex101.com/r/wnpVUY/1
  airtableApiKey: z
    .string()
    .min(1, { message: 'Enter your Airtable API key.' })
    .regex(/key.*/gm, {
      message: 'Invalid Airtable API key. It should look like key***********',
    }),
});

export type CreateCollection = z.infer<typeof CreateCollectionValidator>;
