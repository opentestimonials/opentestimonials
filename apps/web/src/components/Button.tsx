import Link from 'next/link';
import clsx from 'clsx';
import { SVGProps } from 'react';
import useDebounce from '@/hooks/useDebounce';

const baseStyles = {
  solid:
    'group inline-flex items-center justify-center rounded-full py-2 px-4 text-sm font-semibold focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2',
  outline:
    'group inline-flex ring-1 items-center justify-center rounded-full py-2 px-4 text-sm focus:outline-none',
};

const variantStyles = {
  solid: {
    slate:
      'bg-slate-900 text-white hover:[&[aria-disabled="false"]]:bg-slate-700 hover:[&[aria-disabled="false"]]:text-slate-100 active:[&[aria-disabled="false"]]:bg-slate-800 active:[&[aria-disabled="false"]]:text-slate-300 focus-visible:outline-slate-900',
    blue: 'bg-blue-600 text-white hover:[&[aria-disabled="false"]]:text-slate-100 hover:[&[aria-disabled="false"]]:bg-blue-500 active:[&[aria-disabled="false"]]:bg-blue-800 active:[&[aria-disabled="false"]]:text-blue-100 focus-visible:outline-blue-600',
    pink: 'bg-pink-600 text-white hover:[&[aria-disabled="false"]]:text-slate-100 hover:[&[aria-disabled="false"]]:bg-pink-500 active:[&[aria-disabled="false"]]:bg-pink-800 active:[&[aria-disabled="false"]]:text-pink-100 focus-visible:outline-pink-600',
    white:
      'bg-white text-slate-900 hover:[&[aria-disabled="false"]]:bg-blue-50 active:[&[aria-disabled="false"]]:bg-blue-200 active:[&[aria-disabled="false"]]:text-slate-600 focus-visible:outline-white',
  },
  outline: {
    slate:
      'ring-slate-200 text-slate-700 hover:[&[aria-disabled="false"]]:text-slate-900 hover:[&[aria-disabled="false"]]:ring-slate-300 active:[&[aria-disabled="false"]]:bg-slate-100 active:[&[aria-disabled="false"]]:text-slate-600 focus-visible:outline-blue-600 focus-visible:ring-slate-300',
    blue: '',
    pink: '',
    white:
      'ring-slate-700 text-white hover:[&[aria-disabled="false"]]:ring-slate-500 active:[&[aria-disabled="false"]]:ring-slate-700 active:[&[aria-disabled="false"]]:text-slate-400 focus-visible:outline-white',
  },
};

type Colors = 'slate' | 'blue' | 'white' | 'pink';

type BaseButtonProps = {
  variant?: keyof typeof baseStyles;
  color?: Colors;
  className?: string;
};
// (property) JSX.IntrinsicElements.button: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>
type ConditionalProps =
  | ({
      href?: never;
      scroll?: never;
      loading?: boolean;
      disabled?: boolean;
      type?: 'submit' | 'reset' | 'button';
    } & React.ButtonHTMLAttributes<HTMLButtonElement>)
  | ({
      href: string;
      scroll?: boolean;
      loading?: never;
      disabled?: never;
    } & React.AnchorHTMLAttributes<HTMLAnchorElement>);

export function Button({
  variant = 'solid',
  color = 'slate',
  className,
  ...props
}: BaseButtonProps & ConditionalProps) {
  className = clsx(
    baseStyles[variant],
    variantStyles[variant][color],
    className
  );
  const { loading, disabled, ...rest } = props;
  const debouncedLoading = useDebounce(loading, 100);

  if (rest.href) {
    return (
      <Link
        className={clsx('transition-opacity', className)}
        {...rest}
        aria-disabled={!!props.disabled}
      />
    );
  }

  const { scroll, ...buttonRest } = rest;

  // TODO: fix typescript
  return (
    <button
      {...(buttonRest as any)}
      className={clsx('relative transition-opacity', className)}
      aria-disabled={!!props.disabled || !!loading}
      disabled={!!props.disabled || !!loading ? true : undefined}
    >
      {props.children}
      <span
        aria-hidden={debouncedLoading}
        className={clsx(
          'absolute inset-0 grid place-content-center transition-opacity',
          className,
          {
            'opacity-0': !debouncedLoading,
            'opacity-100': debouncedLoading,
          }
        )}
      >
        <LineMdLoadingTwotoneLoop className="text-xl" />
      </span>
    </button>
  );
}

export function LineMdLoadingTwotoneLoop(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      width="1em"
      height="1em"
      viewBox="0 0 24 24"
      {...props}
    >
      <g
        fill="none"
        stroke="currentColor"
        strokeLinecap="round"
        strokeWidth="2"
      >
        <path
          strokeDasharray="60"
          strokeDashoffset="60"
          strokeOpacity=".3"
          d="M12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3Z"
        >
          <animate
            fill="freeze"
            attributeName="stroke-dashoffset"
            dur="1.3s"
            values="60;0"
          ></animate>
        </path>
        <path
          strokeDasharray="15"
          strokeDashoffset="15"
          d="M12 3C16.9706 3 21 7.02944 21 12"
        >
          <animate
            fill="freeze"
            attributeName="stroke-dashoffset"
            dur="0.3s"
            values="15;0"
          ></animate>
          <animateTransform
            attributeName="transform"
            dur="1.5s"
            repeatCount="indefinite"
            type="rotate"
            values="0 12 12;360 12 12"
          ></animateTransform>
        </path>
      </g>
    </svg>
  );
}
