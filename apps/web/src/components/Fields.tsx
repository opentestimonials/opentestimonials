import clsx from 'clsx';
import React, { forwardRef } from 'react';
import { FieldError } from 'react-hook-form';

const formClasses =
  'block w-full appearance-none rounded-md border border-gray-200 bg-gray-50 px-3 py-2 text-gray-900 placeholder-gray-400 focus:border-pink-500 focus:bg-white focus:outline-none focus:ring-pink-500 sm:text-sm';

function Label({ id, children }: { id: string; children: React.ReactNode }) {
  return (
    <label
      htmlFor={id}
      className="mb-3 block text-sm font-medium text-gray-700"
    >
      {children}
    </label>
  );
}

export function ErrorMessage(props: { error?: FieldError | undefined }) {
  return (
    <div
      className="mt-1 text-sm text-red-500"
      role="alert"
      aria-hidden={!props.error}
      style={{
        opacity: props.error ? 1 : 0,
        height: props.error ? '1em' : 0,
        transition: 'all 300ms ease-in-out',
      }}
    >
      {props?.error?.message}
    </div>
  );
}

type TextFieldProps = {
  label: string;
  id: string;
  error?: FieldError | undefined;
} & React.InputHTMLAttributes<HTMLInputElement>;

export const TextField = forwardRef<HTMLInputElement, TextFieldProps>(
  (props, ref) => {
    const { id, label, type = 'text', className = '', ...rest } = props;
    return (
      <div className={className}>
        {label && <Label id={id}>{label}</Label>}
        <input
          id={id}
          type={type}
          {...rest}
          className={formClasses}
          ref={ref}
        />
        <ErrorMessage error={props.error} />
      </div>
    );
  }
);
TextField.displayName = 'TextField';

export function SelectField({
  id,
  label,
  className = '',
  ...props
}: {
  label: string;
  id: string;
} & React.SelectHTMLAttributes<HTMLSelectElement>) {
  return (
    <div className={className}>
      {label && <Label id={id}>{label}</Label>}
      <select id={id} {...props} className={clsx(formClasses, 'pr-8')} />
    </div>
  );
}
