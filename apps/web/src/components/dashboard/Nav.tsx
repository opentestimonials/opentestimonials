import { getStableColor } from '@/utils/getStableColor';
import { useBreadcrumbItem, useBreadcrumbs } from '@react-aria/breadcrumbs';
import clsx from 'clsx';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import React from 'react';
import { FallbackSkeleton } from '../FallbackSkeleton';
import { Icon } from '../Logo';
import { OverlayLink } from '../OverlayLink';

function SlashSeparator() {
  return (
    <svg
      fill="none"
      height="32"
      shapeRendering="geometricPrecision"
      stroke="currentColor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="1"
      viewBox="0 0 24 24"
      width="32"
      className="text-neutral-200"
      aria-hidden={true}
    >
      <path d="M16.88 3.549L7.12 20.451"></path>
    </svg>
  );
}

function AccountImage(props: { session: ReturnType<typeof useSession> }) {
  const user = props.session.data?.user;
  if (!user) {
    return <div className="h-7 w-7 rounded-full bg-neutral-100" />;
  }
  if (!user.image) {
    return (
      <div
        className="flex h-7 w-7 items-center justify-center rounded-full text-lg font-semibold uppercase text-white"
        style={{ backgroundColor: getStableColor(user.id) }}
      >
        {user.name?.charAt(0)}
      </div>
    );
  }
  return <img className="h-7 w-7 rounded-full" src={user.image} />;
}

function MaybeDiv(
  props: {
    children?: React.ReactNode;
    fallbackClassName?: string;
  } & React.HTMLAttributes<HTMLDivElement>
) {
  if (!props.children) {
    return <div className={clsx(props.className, props.fallbackClassName)} />;
  }
  return <div {...props} />;
}

function Breadcrumbs(props: Parameters<typeof useBreadcrumbs>[0]) {
  let { navProps } = useBreadcrumbs(props);
  let children = React.Children.toArray(props.children);

  return (
    <nav {...navProps}>
      <ol style={{ display: 'flex', listStyle: 'none', margin: 0, padding: 0 }}>
        {children.map((child, i) =>
          React.cloneElement(child as any, {
            isCurrent: i === children.length - 1,
          })
        )}
      </ol>
    </nav>
  );
}

function BreadcrumbItem(
  props: {
    children: React.ReactNode;
    isCurrent?: boolean;
  } & Parameters<typeof useBreadcrumbItem>['0']
) {
  let ref = React.useRef<HTMLSpanElement | null>(null);
  let { itemProps } = useBreadcrumbItem({ ...props, elementType: 'span' }, ref);
  return (
    <li>
      <span
        {...itemProps}
        ref={ref}
        className={clsx({
          'cursor-pointer font-medium': props.isCurrent,
        })}
      >
        {props.children}
      </span>
      {!props.isCurrent && <SlashSeparator />}
    </li>
  );
}

export default function Nav(props: {
  breadcrumbs?: {
    label: string;
    href: string;
  }[];
}) {
  const session = useSession();
  return (
    <div className="mx-auto flex w-full max-w-7xl items-center space-x-2 p-4">
      <Link href="/dashboard">
        <Icon className="h-6 w-auto" />
      </Link>
      <SlashSeparator />
      <OverlayLink href="/dashboard" className="flex items-center">
        <AccountImage session={session} />
        <div className="ml-3 text-sm font-medium">
          <FallbackSkeleton
            fallback={<div className="h-6 w-28 rounded-md bg-neutral-100" />}
          >
            {session.data?.user?.name}
          </FallbackSkeleton>
        </div>
      </OverlayLink>
      {props.breadcrumbs && (
        <div className="flex items-center">
          <SlashSeparator />
          <Breadcrumbs>
            {props.breadcrumbs?.map((breadcrumb, i) => (
              <BreadcrumbItem key={i}>
                <Link href={breadcrumb.href} className="text-sm">
                  {breadcrumb.label}
                </Link>
              </BreadcrumbItem>
            ))}
          </Breadcrumbs>
        </div>
      )}
    </div>
  );
}
