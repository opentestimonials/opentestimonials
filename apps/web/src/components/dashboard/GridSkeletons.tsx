import { useState } from 'react';

function randomBetween(min: number, max: number) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function groupBy<T>(array: T[], n: number): T[][] {
  const groups = Array.from({ length: n }).map(() => [] as T[]);
  for (let i = 0; i < array.length; i += 1) {
    groups[i % n].push(array[i]);
  }
  return groups;
}

export function TestimonialSkeleton(props: { height: number }) {
  return (
    <div
      suppressHydrationWarning
      style={{ height: props.height }}
      className="flex w-full max-w-md rounded-md border border-neutral-200 bg-neutral-100"
    />
  );
}

export function GridSkeleton() {
  const [randomHeights] = useState(
    Array.from({ length: 9 }, () => randomBetween(140, 440))
  );
  return (
    <div className="w-full">
      <div className="hidden justify-center space-x-3 lg:flex">
        {groupBy(randomHeights, 3).map((heights, i) => (
          <div className="flex grow flex-col space-y-3" key={i}>
            {heights.map((height, j) => (
              <TestimonialSkeleton height={height} key={j} />
            ))}
          </div>
        ))}
      </div>
      <div className="hidden justify-center space-x-3 md:flex lg:hidden">
        {groupBy(randomHeights, 2).map((heights, i) => (
          <div className="flex grow flex-col space-y-3" key={i}>
            {heights.map((height, j) => (
              <TestimonialSkeleton height={height} key={j} />
            ))}
          </div>
        ))}
      </div>
      <div className="flex grow flex-col items-center justify-center space-y-3 md:hidden">
        {randomHeights.map((height, i) => (
          <TestimonialSkeleton height={height} key={i} />
        ))}
      </div>
    </div>
  );
}
