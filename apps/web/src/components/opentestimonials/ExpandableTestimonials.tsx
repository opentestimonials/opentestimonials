import { Button } from '@/components/Button';
import GridTestimonials, {
  useTestimonials,
} from '@/components/opentestimonials/GridTestimonials';
import clsx from 'clsx';
import { useRef, useState } from 'react';
import { useIntersection } from 'react-use';

export default function ExpandableTestimonials(props: {
  collection: string;
  height?: string;
}) {
  const [expanded, setExpanded] = useState(false);
  const testimonials = useTestimonials({
    subdomain: props.collection,
  });
  const intersectionRef = useRef(null);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const intersection = useIntersection(intersectionRef, {
    root: null,
    rootMargin: '0px',
    threshold: 1,
  });
  const reappear =
    intersection && expanded && intersection.intersectionRatio < 1;

  if (!testimonials) {
    return null;
  }

  function handleClose() {
    setExpanded(false);
    containerRef.current?.scrollIntoView({
      behavior: 'smooth',
    });
  }
  return (
    <div
      className={clsx('relative mx-auto my-8 max-w-7xl p-3 font-system', {
        'max-h-[50rem] min-h-[50rem] overflow-hidden': !expanded,
        grow: expanded,
      })}
      // style={{
      //   minHeight: !expanded ? props.height : 'auto',
      //   maxHeight: !expanded ? props.height : 'auto',
      // }}
      ref={containerRef}
    >
      <GridTestimonials data={testimonials} />
      <div className="absolute top-[4vh]" ref={intersectionRef}></div>
      <div
        className={clsx(
          'pointer-events-none absolute inset-x-0 bottom-0 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 dark:from-slate-900',
          {
            hidden: expanded,
          }
        )}
      >
        <button
          type="button"
          onClick={() => setExpanded(true)}
          className={clsx(
            'group pointer-events-auto relative z-50 inline-flex items-center justify-center rounded-full bg-slate-900 py-2 px-4 text-sm font-semibold text-white transition-opacity hover:bg-slate-700 hover:text-slate-100 focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-900 active:bg-slate-800 active:text-slate-300',
            {
              'pointer-events-auto': !expanded,
              'pointer-events-none': expanded,
            }
          )}
        >
          Show more...
        </button>
      </div>
      <div
        className={clsx(
          'pointer-events-none sticky inset-x-0 bottom-0 -mt-48 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 transition duration-300 dark:from-slate-900',
          {
            'translate-y-4 opacity-0': !reappear,
            'translate-y-0 opacity-100': reappear,
          }
        )}
      >
        <button
          color="slate"
          type="button"
          onClick={handleClose}
          className={clsx(
            'group pointer-events-auto relative z-50 inline-flex items-center justify-center rounded-full bg-slate-900 py-2 px-4 text-sm font-semibold text-white hover:bg-slate-700 hover:text-slate-100 focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-900 active:bg-slate-800 active:text-slate-300',
            {
              'pointer-events-auto': reappear,
            }
          )}
        >
          Okay, I get the point
        </button>
      </div>
    </div>
  );
}
