import GridTestimonials, {
  useTestimonials,
} from '@/components/opentestimonials/GridTestimonials';
import { TestimonialsResponse } from '@/server/testimonials/getTestimonials';
import clsx from 'clsx';
import { useEffect, useRef, useState } from 'react';
import { useIntersection } from 'react-use';

function getTheme() {
  const defaultTheme = {
    expandText: 'Show more...',
    collapseText: 'Okay, I get the point',
    showCollapse: 'true',
    buttonColor: 'white',
    buttonBackgroundColor: 'rgb(15 23 42)',
  };
  if (typeof window !== 'undefined') {
    const url = new URL(window.location.toString());
    return {
      ...defaultTheme,
      ...Object.fromEntries(url.searchParams),
    };
  }
  return defaultTheme;
}

export default function ExpandableTestimonials(
  props: {
    height?: string;
    style?: React.CSSProperties;
  } & (
    | { subdomain: string; testimonials?: never }
    | { subdomain?: never; testimonials: TestimonialsResponse }
  )
) {
  const theme = getTheme();
  const [expanded, setExpanded] = useState(false);
  const testimonials = useTestimonials(props);
  const intersectionRef = useRef(null);
  const containerRef = useRef<HTMLDivElement | null>(null);
  const intersection = useIntersection(intersectionRef, {
    root: null,
    rootMargin: '0px',
    threshold: 1,
  });
  const reappear =
    intersection && expanded && intersection.intersectionRatio < 1;
  useEffect(() => {
    window.addEventListener('message', handleMessage);
    return () => {
      window.removeEventListener('message', handleMessage);
    };
  }, []);

  if (!testimonials) {
    return null;
  }

  function handleExpand() {
    setExpanded(true);
    const scrollHeight = containerRef.current?.scrollHeight || 0;
    parent.postMessage({ type: 'expand-testimonials', scrollHeight }, '*');
  }

  function handleUnexpand() {
    setExpanded(false);
    if (!window.location.search.includes('noscroll')) {
      containerRef.current?.scrollIntoView({
        behavior: 'smooth',
      });
    }
    parent.postMessage({ type: 'unexpand-testimonials' }, '*');
  }

  function handleMessage(e: MessageEvent) {
    if (e.data.type === 'viewport-height') {
      console.log('vh', e.data.vh);
    } else if (e.data.type === 'scroll') {
      console.log(e.data.scrollY);
    }
  }

  return (
    <div
      className={clsx('relative font-system', {
        'overflow-hidden': !expanded,
        grow: expanded,
      })}
      style={props.style}
      ref={containerRef}
    >
      <GridTestimonials data={testimonials} />
      <div className="absolute top-[4vh]" ref={intersectionRef}></div>
      <div className="pointer-events-none sticky inset-0">
        <div
          className={clsx(
            'pointer-events-none absolute inset-x-0 bottom-0 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 dark:from-slate-900',
            {
              hidden: expanded,
            }
          )}
        >
          <button
            type="button"
            onClick={handleExpand}
            className={clsx(
              'group pointer-events-auto relative z-50 inline-flex cursor-pointer items-center justify-center rounded-full bg-slate-900 py-2 px-4 text-sm font-semibold text-white transition-opacity hover:bg-slate-700 hover:text-slate-100 focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-900 active:bg-slate-800 active:text-slate-300',
              {
                'pointer-events-auto': !expanded,
                'pointer-events-none': expanded,
              }
            )}
            suppressHydrationWarning
          >
            {theme.expandText}
          </button>
        </div>
        <div
          className={clsx(
            'pointer-events-none sticky inset-x-0 bottom-0 -mt-48 flex justify-center bg-gradient-to-t from-white pt-32 pb-8 transition duration-300 dark:from-slate-900',
            {
              'translate-y-4 opacity-0': !reappear,
              'translate-y-0 opacity-100': reappear,
              hidden: theme.showCollapse === 'false',
            }
          )}
          hidden={theme.showCollapse === 'false'}
          suppressHydrationWarning
        >
          <button
            color="slate"
            type="button"
            onClick={handleUnexpand}
            className={clsx(
              'group pointer-events-auto relative z-50 inline-flex items-center justify-center rounded-full bg-slate-900 py-2 px-4 text-sm font-semibold text-white hover:bg-slate-700 hover:text-slate-100 focus:outline-none focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-900 active:bg-slate-800 active:text-slate-300',
              {
                'pointer-events-auto': reappear,
              }
            )}
            suppressHydrationWarning
          >
            {theme.collapseText}
          </button>
        </div>
      </div>
    </div>
  );
}
