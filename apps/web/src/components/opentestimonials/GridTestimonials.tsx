import { trpc } from '@/utils/trpc';
import type { Testimonial } from '@/validators/testimonial';
import {
  blue,
  crimson,
  cyan,
  grass,
  green,
  indigo,
  orange,
  pink,
  plum,
  purple,
  red,
  teal,
  tomato,
  violet,
} from '@radix-ui/colors';
import Image from 'next/image';
import { SVGProps } from 'react';

function TwitterVerifiedIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      viewBox="0 0 24 24"
      aria-label="Verified account"
      className="r-1cvl2hr r-4qtqp9 r-yyyyoo r-1xvli5t r-9cviqr r-f9ja8p r-og9te1 r-bnwqim r-1plcrui r-lrvibr"
      {...props}
    >
      <path d="M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25a3.606 3.606 0 00-1.336-.25c-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5a.749.749 0 01-1.041.208l-.115-.094-2.415-2.415a.749.749 0 111.06-1.06l1.77 1.767 3.825-5.74a.75.75 0 011.25.833z" />
    </svg>
  );
}

function DefaultProfile(props: { letter?: string; backgroundColor: string }) {
  const { letter, backgroundColor } = props;
  return (
    <div
      className="flex h-12 w-12 items-center justify-center rounded-full text-lg font-semibold uppercase text-white"
      style={{ backgroundColor }}
    >
      {letter}
    </div>
  );
}

function MaybeLink(
  props: { href?: string } & React.HTMLAttributes<HTMLAnchorElement>
) {
  const { href, children, ...rest } = props;
  if (!href) {
    return <>{children}</>;
  }
  return (
    <a href={href} target="_blank" rel="noopener noreferrer" {...rest}>
      {children}
    </a>
  );
}

const backgroundColors = [
  tomato.tomato9,
  red.red9,
  crimson.crimson9,
  pink.pink9,
  plum.plum9,
  purple.purple9,
  violet.violet9,
  indigo.indigo9,
  blue.blue9,
  cyan.cyan9,
  teal.teal9,
  green.green9,
  grass.grass9,
  orange.orange9,
];

function getStableBackgroundColor(str: string) {
  const hash = str.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
  return String(backgroundColors[hash % backgroundColors.length]);
}

function formatProfileUrl(profileUrl: string) {
  if (profileUrl.length < 1) {
    return '';
  }
  const _fullProfileUrl = new URL(profileUrl);
  const result = new URL(_fullProfileUrl.pathname, _fullProfileUrl.origin);
  result.searchParams.set(
    'userId',
    _fullProfileUrl.searchParams.get('userId') ?? ''
  );
  return result.toString();
}

function BaseTestimonial(props: { testimonial: Testimonial }) {
  const profilePictureUrl = formatProfileUrl(
    props.testimonial.profile_picture_url ?? ''
  );
  const name = props.testimonial.name;

  return (
    <div className="relative box-border w-full max-w-md rounded-md border border-solid border-neutral-200 bg-white p-4">
      <MaybeLink
        className="absolute inset-0 z-0"
        href={props.testimonial.source_url}
      >
        <div className="sr-only"></div>
      </MaybeLink>

      <div className="flex items-start">
        {profilePictureUrl ? (
          <MaybeLink
            href={props.testimonial.profile_url}
            className="relative z-10"
          >
            <Image
              src={profilePictureUrl}
              alt={name}
              className="aspect-square rounded-full object-cover"
              width={48}
              height={48}
              priority={true}
            />
          </MaybeLink>
        ) : (
          <DefaultProfile
            letter={name?.[0]}
            backgroundColor={getStableBackgroundColor(name)}
          />
        )}
        <div className="5 ml-3 py-0">
          <div className="flex items-center font-semibold text-neutral-900">
            <MaybeLink href={props.testimonial.profile_url} className="z-10">
              {name}
            </MaybeLink>
            {props.testimonial.verified && (
              <TwitterVerifiedIcon
                className="ml-1.5"
                fill="rgb(29, 155, 240)"
                width={18.75}
                height={18.75}
              />
            )}
          </div>
          <div className="text-sm leading-6 text-gray-500">
            <MaybeLink
              href={props.testimonial.company_url}
              className="relative z-10"
            >
              {props.testimonial.title_or_company}
            </MaybeLink>
          </div>
        </div>
        {/* {showLogos && logo && (
          <div className="ml-auto mr-0 p-1">
            {logo}
          </div>
        )}
        {showLogos && !logo && (
          <div className="ml-auto mr-0 p-1">
            <a
              href={testimonial.externalTestimonialUrl || ''}
              rel="external noopener noreferrer"
              target="_blank"
            >
              <TestimonialLogo testimonial={testimonial} />
            </a>
          </div>
        )} */}
      </div>
      <div
        className="child-img:mt-2 child-img:rounded-lg child-img:border mt-2 whitespace-pre-line text-neutral-800"
        dangerouslySetInnerHTML={{
          __html: props.testimonial.quote,
        }}
      ></div>
    </div>
  );
}

function approximateHeight(testimonial: Testimonial) {
  return testimonial.quote.length;
  // return testimonial.fields['Quote'].split(' ').length;
}

function getColumns(n: number, testimonials: Testimonial[]) {
  const columns = Array.from({ length: n }).map(() => []) as Testimonial[][];
  const columnHeights = columns.map(() => 0);
  for (let i = 0; i < testimonials.length; ++i) {
    const record = testimonials[i];
    const iColumn = columnHeights.indexOf(Math.min(...columnHeights));
    // console.log(iColumn)
    // const column = iColumn
    // const column = i % n
    if (!record || !columns[iColumn]) throw new Error('Missing record');
    columns[iColumn]!.push(record);
    columnHeights[iColumn] += approximateHeight(record);
  }
  return columns;
}

export default function GridTestimonials(props: {
  data: Exclude<ReturnType<typeof useTestimonials>, null>;
}) {
  return (
    <div className="isolate">
      <div className="hidden justify-center space-x-3 lg:flex">
        {props.data.threeColumns.map((testimonialColumn, i) => (
          <div className="flex flex-col space-y-3" key={i}>
            {testimonialColumn.map((testimonial) => (
              <BaseTestimonial testimonial={testimonial} key={testimonial.id} />
            ))}
          </div>
        ))}
      </div>
      <div className="hidden justify-center space-x-3 md:flex lg:hidden">
        {props.data.twoColumns.map((testimonialColumn, i) => (
          <div className="flex flex-col space-y-3" key={i}>
            {testimonialColumn.map((testimonial) => (
              <BaseTestimonial testimonial={testimonial} key={testimonial.id} />
            ))}
          </div>
        ))}
      </div>
      <div className="flex flex-col items-center justify-center space-y-3 md:hidden">
        {props.data.testimonials.map((testimonial) => (
          <BaseTestimonial testimonial={testimonial} key={testimonial.id} />
        ))}
      </div>
    </div>
  );
}

export function useTestimonials(props: { subdomain: string }) {
  const testimonialsQuery = trpc.useQuery([
    'embed.testimonials',
    {
      subdomain: props.subdomain,
    },
  ]);
  if (!testimonialsQuery.data || testimonialsQuery.isLoading) {
    return null;
  }
  return {
    testimonials: testimonialsQuery.data,
    twoColumns: getColumns(2, testimonialsQuery.data),
    threeColumns: getColumns(3, testimonialsQuery.data),
  };
}
