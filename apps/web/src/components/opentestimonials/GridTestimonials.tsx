import { TestimonialsResponse } from '@/server/testimonials/getTestimonials';
import { getStableColor } from '@/utils/getStableColor';
import { trpc } from '@/utils/trpc';
import type { Testimonial } from '@/validators/testimonial';
import { marked } from 'marked';
import Image from 'next/image';
import { SVGProps } from 'react';
import sanitizeHtml from 'sanitize-html';
import { VimeoEmbed, YouTubeEmbed } from '../IframeEmbed';

function TwitterVerifiedIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      viewBox="0 0 24 24"
      aria-label="Verified account"
      className="r-1cvl2hr r-4qtqp9 r-yyyyoo r-1xvli5t r-9cviqr r-f9ja8p r-og9te1 r-bnwqim r-1plcrui r-lrvibr"
      {...props}
    >
      <path d="M22.5 12.5c0-1.58-.875-2.95-2.148-3.6.154-.435.238-.905.238-1.4 0-2.21-1.71-3.998-3.818-3.998-.47 0-.92.084-1.336.25C14.818 2.415 13.51 1.5 12 1.5s-2.816.917-3.437 2.25a3.606 3.606 0 00-1.336-.25c-2.11 0-3.818 1.79-3.818 4 0 .494.083.964.237 1.4-1.272.65-2.147 2.018-2.147 3.6 0 1.495.782 2.798 1.942 3.486-.02.17-.032.34-.032.514 0 2.21 1.708 4 3.818 4 .47 0 .92-.086 1.335-.25.62 1.334 1.926 2.25 3.437 2.25 1.512 0 2.818-.916 3.437-2.25.415.163.865.248 1.336.248 2.11 0 3.818-1.79 3.818-4 0-.174-.012-.344-.033-.513 1.158-.687 1.943-1.99 1.943-3.484zm-6.616-3.334l-4.334 6.5a.749.749 0 01-1.041.208l-.115-.094-2.415-2.415a.749.749 0 111.06-1.06l1.77 1.767 3.825-5.74a.75.75 0 011.25.833z" />
    </svg>
  );
}

export function DefaultProfile(props: {
  letter?: string;
  backgroundColor: string;
}) {
  const { letter, backgroundColor } = props;
  return (
    <div
      className="flex h-12 w-12 items-center justify-center rounded-full text-lg font-semibold uppercase text-white"
      style={{ backgroundColor }}
    >
      {letter}
    </div>
  );
}

export function MaybeLink(
  props: { href?: string } & React.HTMLAttributes<HTMLAnchorElement>
) {
  const { href, children, ...rest } = props;
  if (!href) {
    return <>{children}</>;
  }
  return (
    <a href={href} target="_blank" rel="noopener noreferrer" {...rest}>
      {children}
    </a>
  );
}

export function Video(props: { url: string; className?: string }) {
  if (/youtube/gim.test(props.url)) {
    const videoId = /youtube.com\/watch\?v=(\w*)/gim.exec(props.url)?.[1];
    if (!videoId) {
      return null;
    }
    return <YouTubeEmbed videoId={videoId} />;
  } else if (/vimeo/gim.test(props.url)) {
    const videoId = /vimeo\.com\/(\w*)/gim.exec(props.url)?.[1];
    if (!videoId) {
      return null;
    }
    return <VimeoEmbed videoId={videoId} />;
  }
  return (
    <iframe
      src={props.url}
      width="100%"
      height="100%"
      frameBorder="0"
      allowFullScreen
      className={props.className}
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    />
  );
}

export function BaseTestimonial(props: { testimonial: Testimonial }) {
  const name = props.testimonial.name;

  return (
    <div className="relative box-border w-full max-w-md rounded-md border border-solid border-neutral-200 bg-white p-4">
      <MaybeLink
        className="absolute inset-0 z-0"
        href={props.testimonial.source_url}
      >
        <div className="sr-only"></div>
      </MaybeLink>

      <div className="flex items-start">
        {props.testimonial.profile_picture_url ? (
          <MaybeLink
            href={props.testimonial.profile_url}
            className="relative z-10"
          >
            <Image
              src={props.testimonial.profile_picture_url}
              alt={name}
              className="aspect-square rounded-full object-cover"
              width={48}
              height={48}
              priority={true}
            />
          </MaybeLink>
        ) : (
          <DefaultProfile
            letter={name?.[0]}
            backgroundColor={getStableColor(name)}
          />
        )}
        <div className="5 ml-3 py-0">
          <div className="flex items-center font-semibold text-neutral-900">
            <MaybeLink href={props.testimonial.profile_url} className="z-10">
              {name}
            </MaybeLink>
            {props.testimonial.verified && (
              <TwitterVerifiedIcon
                className="ml-1.5"
                fill="rgb(29, 155, 240)"
                width={18.75}
                height={18.75}
              />
            )}
          </div>
          <div className="text-sm leading-6 text-gray-500">
            <MaybeLink
              href={props.testimonial.company_url}
              className="relative z-10"
            >
              {props.testimonial.title_or_company}
            </MaybeLink>
          </div>
        </div>
        {/* {showLogos && logo && (
          <div className="ml-auto mr-0 p-1">
            {logo}
          </div>
        )}
        {showLogos && !logo && (
          <div className="ml-auto mr-0 p-1">
            <a
              href={testimonial.externalTestimonialUrl || ''}
              rel="external noopener noreferrer"
              target="_blank"
            >
              <TestimonialLogo testimonial={testimonial} />
            </a>
          </div>
        )} */}
      </div>
      <div
        className="mt-2 text-neutral-800 [&_a]:text-blue-500"
        dangerouslySetInnerHTML={{
          __html: sanitizeHtml(marked.parse(props.testimonial.quote)),
        }}
      ></div>
      {props.testimonial.images?.length && (
        <div className="mt-2 space-y-2">
          {props.testimonial.images?.map((image, i) => (
            <div
              key={i}
              style={{ aspectRatio: String(image.width / image.height) }}
              className="max-w-full"
            >
              <Image
                alt="Testimonial image"
                src={image.url}
                width={image.width}
                height={image.height}
                className="h-auto w-full"
                priority={true}
              />
            </div>
          ))}
        </div>
      )}
      {props.testimonial.video_url && (
        <div className="mt-2 aspect-video w-full">
          <Video url={props.testimonial.video_url} />
        </div>
      )}
    </div>
  );
}

function approximateHeight(testimonial: Testimonial, columns: number) {
  let result = testimonial.quote.length;
  if (testimonial.video_url) {
    result += columns === 3 ? 210 : 223;
  }
  result += (testimonial.images?.length ?? 0) * (columns === 3 ? 230 : 278);
  return result;
}

function getColumns(n: number, testimonials: Testimonial[]) {
  const columns = Array.from({ length: n }).map(() => []) as Testimonial[][];
  const columnHeights = columns.map(() => 0);
  for (let i = 0; i < testimonials.length; ++i) {
    const record = testimonials[i];
    const iColumn = columnHeights.indexOf(Math.min(...columnHeights));
    if (!record || !columns[iColumn]) throw new Error('Missing record');
    columns[iColumn]!.push(record);
    columnHeights[iColumn] += approximateHeight(record, n);
  }
  return columns;
}

export default function GridTestimonials(props: {
  data: Exclude<ReturnType<typeof useTestimonials>, null>;
}) {
  return (
    <div className="isolate font-system">
      <div className="hidden justify-center space-x-3 lg:flex">
        {props.data.threeColumns.map((testimonialColumn, i) => (
          <div className="flex flex-col space-y-3" key={i}>
            {testimonialColumn.map((testimonial) => (
              <BaseTestimonial testimonial={testimonial} key={testimonial.id} />
            ))}
          </div>
        ))}
      </div>
      <div className="hidden justify-center space-x-3 md:flex lg:hidden">
        {props.data.twoColumns.map((testimonialColumn, i) => (
          <div className="flex flex-col space-y-3" key={i}>
            {testimonialColumn.map((testimonial) => (
              <BaseTestimonial testimonial={testimonial} key={testimonial.id} />
            ))}
          </div>
        ))}
      </div>
      <div className="flex flex-col items-center justify-center space-y-3 md:hidden">
        {props.data.testimonials.map((testimonial) => (
          <BaseTestimonial testimonial={testimonial} key={testimonial.id} />
        ))}
      </div>
    </div>
  );
}

export function GridTestimonials2(props: {
  testimonials: TestimonialsResponse;
}) {
  return (
    <div className="isolate mx-auto">
      <ul className="columns-1 gap-3 space-y-3 p-4 md:columns-2 lg:columns-3">
        {props.testimonials.map((testimonial) => (
          <li key={testimonial.id} className="break-inside-avoid-column">
            <BaseTestimonial testimonial={testimonial} />
          </li>
        ))}
      </ul>
    </div>
  );
}

export function useTestimonials(
  props:
    | { subdomain: string; testimonials?: never }
    | { subdomain?: never; testimonials: TestimonialsResponse },
  options?: {
    onError?: () => void;
  }
) {
  if (!props.testimonials) {
    const testimonialsQuery = trpc.useQuery(
      [
        'embed.testimonials',
        {
          subdomain: props.subdomain,
        },
      ],
      {
        onError: (e) => {
          options?.onError?.();
        },
      }
    );
    if (!testimonialsQuery.data || testimonialsQuery.isLoading) {
      return null;
    }
    return {
      testimonials: testimonialsQuery.data,
      twoColumns: getColumns(2, testimonialsQuery.data),
      threeColumns: getColumns(3, testimonialsQuery.data),
    };
  }
  return {
    testimonials: props.testimonials,
    twoColumns: getColumns(2, props.testimonials),
    threeColumns: getColumns(3, props.testimonials),
  };
}
