import Stripe from 'stripe';

export interface SyncOptions {
  stripe: Stripe;
  stripeSecretKey: string;
  stripeEndpointSecret: string;
  stripeSyncUrl?: string;
  databaseAdapter: StripeSyncDatabaseAdapter;
}

export interface StripeSyncDatabaseAdapter {
  /**
   * @description The database schema that is reserved to sync stripe data.
   * @default "stripe"
   */
  reservedSchema?: string;

  /**
   * @description Enable `useFakeSchema` in databases that don't support schemas (eg. mysql) to use `stripe__` as a prefix for all tables.
   * @default false
   */
  useFakeSchema?: boolean;

  /**
   * The maximum number of stale events to encounter before resyncing from `/events`
   * @default 10
   */
  maximumStaleCount?: number;

  upsertRow(options: {
    data: any;
    properties: string[];
    /**
     * @description The table to upsert the data into.
     */
    table: string;
    /**
     * @description The schema to upsert the data into. If `useFakeSchema` is enabled, the schema name will instead be prefixed.
     * @default "stripe"
     */
    schema: string;
    onConflictColumns?: string[];
  }): Promise<void>;

  upsertRows(options: {
    rows: any[];
    properties: string[];
    /**
     * @description The table to upsert the data into.
     */
    table: string;
    /**
     * @description The schema to upsert the data into. If `useFakeSchema` is enabled, the schema name will instead be prefixed.
     * @default "stripe"
     */
    schema: string;
    onConflictColumns?: string[];
  }): Promise<void>;

  getMostRecentSyncCreated(options: { schema: string }): Promise<number | null>;

  isEventAlreadyProcessed(options: {
    schema: string;
    idempotencyKey: string;
  }): Promise<boolean>;
}
