// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  // output                   = "./zod" // (default) the directory where generated zod schemas will be saved

  // relationModel            = true // (default) Create and export both plain and related models.
  // // relationModel         = "default" // Do not export model without relations.
  // // relationModel         = false // Do not generate related model

  // modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  // modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  // useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  // prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model Collection {
  id             String  @id @default(cuid())
  ownerId        String
  owner          User    @relation(fields: [ownerId], references: [id])
  airtableUrl    String
  airtableApiKey String?
  airtableBase   String?
  airtableTable  String?
  subdomain      String  @unique
}

// Neccessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
